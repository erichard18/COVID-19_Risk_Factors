2020-03-21 10:50:48,366 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,376 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'da5d587014c012e9dc66bc3c83203e1a938eef9c' - B64:dC6ZYN6DDtAhwlIex9+JPw== Hex:742e9960de830ed021c2521ec7df893f
2020-03-21 10:50:48,404 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: +bsQjpJECZl0MH5GwPyVY72XJI8h1+AMATWcYEJbOvF7UpNiFAR/5eHa2mO/795hgZXo92aPeQ4=, x-amz-request-id: 9CE960C38EEC196A, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: os_ewg5TPc8ZhY2gV7AFbtCNvgeeCOpC, x-amz-server-side-encryption: AES256, ETag: "0ceb70e7c43b5b587218584b3a943a74", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,404 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@572fee07
2020-03-21 10:50:48,404 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,404 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,404 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="0ceb70e7c43b5b587218584b3a943a74"
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,404 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,404 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: e02a979cc2b903769cd0e5486c579caa239de783
2020-03-21 10:50:48,404 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@2c4fe868 action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,404 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,405 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,408 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,408 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,423 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 5SR8qteB9TltnMdDe7XFCkKrtXnOJLmzk9pcueXfQZQaX4Cn/JxU8kqP+5e4aFybP7wlGk7njYE=, x-amz-request-id: A345D97D3EB0AA27, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: LfCN.jnODOgD.W_lqxYtt_QsljJ0u7nq, x-amz-server-side-encryption: AES256, ETag: "742e9960de830ed021c2521ec7df893f", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,423 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@105a8e6a
2020-03-21 10:50:48,423 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,423 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,423 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,423 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,423 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,423 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="742e9960de830ed021c2521ec7df893f"
2020-03-21 10:50:48,423 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,424 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,424 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,424 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,424 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,424 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,424 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,424 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: da5d587014c012e9dc66bc3c83203e1a938eef9c
2020-03-21 10:50:48,424 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@490c0e4d action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,424 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,424 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,427 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,428 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,432 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 5qY1XJui3M5DBKf5AOYRTW2NK3wj6CMiLZ3KZp3BXY4+Mr6mHzGwI4jMFxbHozOEQHpZ6oL5Y2Y=, x-amz-request-id: 72C432E8CC151CAF, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: 3c2qoKy_1Zjw956tqtCNQNtEsVFVdaqS, x-amz-server-side-encryption: AES256, ETag: "b957594a1785d1f1412f3dac66ca2d9c", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,432 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@1aa651a5
2020-03-21 10:50:48,432 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,432 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,432 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="b957594a1785d1f1412f3dac66ca2d9c"
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,432 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,432 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: a304c61287b19337abc5d804e3ab0ce2c62ec757
2020-03-21 10:50:48,432 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@1a5b4e4f action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,432 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,432 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,433 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,433 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/ae2dd85cc15282494f9c981db809cb578f1f5451?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=6fe0e5b2327b06550dd5b896280d90440bccd3b9abf911b73588d86f94d93c69
2020-03-21 10:50:48,433 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,433 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,433 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,433 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,433 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,433 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,434 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 40039
2020-03-21 10:50:48,434 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 40039
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,434 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/ae2dd85cc15282494f9c981db809cb578f1f5451?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=6fe0e5b2327b06550dd5b896280d90440bccd3b9abf911b73588d86f94d93c69', expecting response codes: [200]
2020-03-21 10:50:48,434 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 336079, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,434 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,434 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,434 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,436 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,436 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,483 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,483 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/d45efda251a37fd91453b559353b64576958cb36?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=13d2dfff4a66418d7cd25ab0e8c9aaaf547d71ee84788790219f8deec3561f9c
2020-03-21 10:50:48,484 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,484 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,484 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,484 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,484 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,484 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 14117
2020-03-21 10:50:48,484 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 14117
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,484 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/d45efda251a37fd91453b559353b64576958cb36?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=13d2dfff4a66418d7cd25ab0e8c9aaaf547d71ee84788790219f8deec3561f9c', expecting response codes: [200]
2020-03-21 10:50:48,484 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 88940, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,484 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,484 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,485 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,519 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,519 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/c4453197c0374c16a512b0788bd8c33bda08d206?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=0826f238826f28dda060843bc75d9c73fe64955af5d9adbc5e9b88ab17c50d2d
2020-03-21 10:50:48,520 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,520 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,520 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,520 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,520 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,520 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 12537
2020-03-21 10:50:48,520 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 12537
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,520 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/c4453197c0374c16a512b0788bd8c33bda08d206?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=0826f238826f28dda060843bc75d9c73fe64955af5d9adbc5e9b88ab17c50d2d', expecting response codes: [200]
2020-03-21 10:50:48,520 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 67165, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,520 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,520 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,520 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,521 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,521 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/6e4414f87eeed25ba753111f947c7c6db0a8ce4a?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=9cd6ba97e536bdfbe0a78b6fa39f3b8fabdf4f8e7bb4042c1bdb00f30ae2fe84
2020-03-21 10:50:48,521 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,521 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,521 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,521 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,521 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,521 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,522 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 10573
2020-03-21 10:50:48,522 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 10573
2020-03-21 10:50:48,522 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,522 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/6e4414f87eeed25ba753111f947c7c6db0a8ce4a?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=9cd6ba97e536bdfbe0a78b6fa39f3b8fabdf4f8e7bb4042c1bdb00f30ae2fe84', expecting response codes: [200]
2020-03-21 10:50:48,522 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 49253, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,522 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,522 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,522 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,522 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,522 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,522 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,536 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'ae2dd85cc15282494f9c981db809cb578f1f5451' - B64:4vWGYppc7+ma7+6b/4VDPQ== Hex:e2f586629a5cefe99aefee9bff85433d
2020-03-21 10:50:48,570 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'd45efda251a37fd91453b559353b64576958cb36' - B64:4mhZaqOUTw8u5FxGMc5Lrw== Hex:e268596aa3944f0f2ee45c4631ce4baf
2020-03-21 10:50:48,602 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 8dOAdMWBg5FLGRbO5HvgyFUw2KRqxZam8Sxmw7dDFKm8UpkThMgTHAOiPyiTlNzgKDhfQxY9HKc=, x-amz-request-id: 65027DD7D954C45B, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: W5ag_HiNV6mXlpoW2SfbeoNJXICfTrJF, x-amz-server-side-encryption: AES256, ETag: "e2f586629a5cefe99aefee9bff85433d", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,602 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@2749c2e9
2020-03-21 10:50:48,602 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,602 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,602 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,602 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,602 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,602 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="e2f586629a5cefe99aefee9bff85433d"
2020-03-21 10:50:48,602 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,602 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,602 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,603 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,603 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,603 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,603 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,603 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: ae2dd85cc15282494f9c981db809cb578f1f5451
2020-03-21 10:50:48,603 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@15c960e9 action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,603 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,603 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,603 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '6e4414f87eeed25ba753111f947c7c6db0a8ce4a' - B64:QGEcFjC481FXEiQWPmRCGw== Hex:40611c1630b8f351571224163e64421b
2020-03-21 10:50:48,606 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,606 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,612 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'c4453197c0374c16a512b0788bd8c33bda08d206' - B64:7hh9pU5TC59t8jXlV2d0kA== Hex:ee187da54e530b9f6df235e557677490
2020-03-21 10:50:48,634 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: vWzB2HVmC544Cg1wijtBgUBjp64JrMmlAeSuD8tNz7COu0NvIYQBHjqq5erICX/N2+teO5qlJMA=, x-amz-request-id: 4C2CCB718A33A178, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: H8_MOYT1MDsmAApZ.odgI.nr78VwW9Yr, x-amz-server-side-encryption: AES256, ETag: "e268596aa3944f0f2ee45c4631ce4baf", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,634 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@4d82a23
2020-03-21 10:50:48,634 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,634 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,634 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="e268596aa3944f0f2ee45c4631ce4baf"
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,634 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,635 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,635 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: d45efda251a37fd91453b559353b64576958cb36
2020-03-21 10:50:48,635 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@fa5b67c action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,635 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,635 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,638 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,638 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,646 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: Mefbw7ItKl4Cxq49/uE7sHOhGlXMDYWcgrVlpd4onaJD7gJye/oGIGYN/HEoKFqiWZTR867bVL4=, x-amz-request-id: 27D0D8C269079C2D, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: GLhIPL8RaOD55qYG4WdCjT_JQW4M.ayG, x-amz-server-side-encryption: AES256, ETag: "40611c1630b8f351571224163e64421b", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,646 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@b3ab648
2020-03-21 10:50:48,646 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,646 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,646 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="40611c1630b8f351571224163e64421b"
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,646 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,646 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 6e4414f87eeed25ba753111f947c7c6db0a8ce4a
2020-03-21 10:50:48,646 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@71d253d2 action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,646 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,646 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,653 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,653 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,665 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: RYfh3x25yCjrjuBlGwbqPXRtu1tQ4fyHe2s6lIoletuPrdWo0WlHuUnw25sM3T9SFC+ky1iu4js=, x-amz-request-id: 93DA81872C03A440, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: 6z3I2TKq.y06sdHqmdAc7.g.rEWq0zOO, x-amz-server-side-encryption: AES256, ETag: "ee187da54e530b9f6df235e557677490", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,665 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@5618f3e5
2020-03-21 10:50:48,665 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,665 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,665 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="ee187da54e530b9f6df235e557677490"
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,665 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,665 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: c4453197c0374c16a512b0788bd8c33bda08d206
2020-03-21 10:50:48,665 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@42379886 action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,665 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,665 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,672 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,672 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,673 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,673 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/fdbb297e6bcff943e6a7f86761c10d1f1d64f976?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=32ffccabe0834fce842d1397b5725257fb0d27bff20f9744f06141334284e39e
2020-03-21 10:50:48,673 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,673 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,673 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,673 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,673 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,673 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 2637
2020-03-21 10:50:48,673 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 2637
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,673 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/fdbb297e6bcff943e6a7f86761c10d1f1d64f976?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=32ffccabe0834fce842d1397b5725257fb0d27bff20f9744f06141334284e39e', expecting response codes: [200]
2020-03-21 10:50:48,673 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 12472, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,673 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,673 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,673 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,703 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,703 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/a95351963ca62617b3ecf3e390ad0a09079f41f0?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=2717de695fa858387d5c73cc3233f9676af412c82d63cb2e8f920f14d62f3c59
2020-03-21 10:50:48,703 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,703 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,703 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,703 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,703 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,703 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,703 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 10000
2020-03-21 10:50:48,704 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 10000
2020-03-21 10:50:48,704 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,704 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/a95351963ca62617b3ecf3e390ad0a09079f41f0?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=2717de695fa858387d5c73cc3233f9676af412c82d63cb2e8f920f14d62f3c59', expecting response codes: [200]
2020-03-21 10:50:48,704 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 55238, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,704 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,704 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,704 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,704 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,704 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,704 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,718 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,718 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/0d94821c5be7066467369622cf843af9cae636c9?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=8397099dc18cd090323ff98e7d90e080e796f783b60a176e604b8ac29ee70567
2020-03-21 10:50:48,718 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,718 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,718 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,718 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,718 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,718 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,719 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 26175
2020-03-21 10:50:48,719 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 26175
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,719 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/0d94821c5be7066467369622cf843af9cae636c9?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=8397099dc18cd090323ff98e7d90e080e796f783b60a176e604b8ac29ee70567', expecting response codes: [200]
2020-03-21 10:50:48,719 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 192175, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,719 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,719 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,719 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,735 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,735 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/c52c8c272f904c94fb6916e94d043ae1b80f8de9?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=088f7845216fb6be2cb69022c357c008d408590f9894751cc2f7b285c6a6d2ae
2020-03-21 10:50:48,735 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,735 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,735 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,735 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,735 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,735 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 29001
2020-03-21 10:50:48,735 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 29001
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,735 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/c52c8c272f904c94fb6916e94d043ae1b80f8de9?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=088f7845216fb6be2cb69022c357c008d408590f9894751cc2f7b285c6a6d2ae', expecting response codes: [200]
2020-03-21 10:50:48,735 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 184954, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,735 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,735 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,736 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,746 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'fdbb297e6bcff943e6a7f86761c10d1f1d64f976' - B64:CMImhPkXiQlc/BQP+FllQg== Hex:08c22684f91789095cfc140ff8596542
2020-03-21 10:50:48,789 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'a95351963ca62617b3ecf3e390ad0a09079f41f0' - B64:HdSLcK/GWWn1MO1BXY6G8A== Hex:1dd48b70afc65969f530ed415d8e86f0
2020-03-21 10:50:48,800 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: EyqlZAbO0u+1vxtAMxJVIp5LUm0DLnk9dRVf1wUYDrD0bb5sc9dyOUYZVWWyQHGPjTrIpq4kQwk=, x-amz-request-id: 565BC250FA19A5B0, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: mxuI0QYOJNLJCDGqKR1Pr.X7KcAkU81E, x-amz-server-side-encryption: AES256, ETag: "08c22684f91789095cfc140ff8596542", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,800 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@4417bb5c
2020-03-21 10:50:48,800 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,800 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,800 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="08c22684f91789095cfc140ff8596542"
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,800 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,800 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: fdbb297e6bcff943e6a7f86761c10d1f1d64f976
2020-03-21 10:50:48,800 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@777101f action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,801 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,801 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,808 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,808 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:48,812 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '0d94821c5be7066467369622cf843af9cae636c9' - B64:LrmHylWujYq3/Buz1ctwsA== Hex:2eb987ca55ae8d8ab7fc1bb3d5cb70b0
2020-03-21 10:50:48,820 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'c52c8c272f904c94fb6916e94d043ae1b80f8de9' - B64:iUaH268o5Cq5yPeDfiJ0uQ== Hex:894687dbaf28e42ab9c8f7837e2274b9
2020-03-21 10:50:48,872 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: DLqtI6c7PoCwyd+e/9YmnJ/xQ31ZdJptFa5ky3B3niMpr1LCOHhQLGu9zGdQmFYAHBXeE/aWidQ=, x-amz-request-id: 17B41B1C52964D6D, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: BzUWLRP5Ip198lg.UCK3Q3rg8l5CrIIs, x-amz-server-side-encryption: AES256, ETag: "1dd48b70afc65969f530ed415d8e86f0", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,872 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@1c389f6b
2020-03-21 10:50:48,872 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,872 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,873 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="1dd48b70afc65969f530ed415d8e86f0"
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,873 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,873 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: a95351963ca62617b3ecf3e390ad0a09079f41f0
2020-03-21 10:50:48,873 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@c8c8c64 action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,873 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,873 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,875 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,875 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/b20c0326b97ffc9e718d597d1c9b5c12925b1365?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=09f70700edab3792142df26274c20b88ad08216a0d5f76afa21a918d13d8d6a5
2020-03-21 10:50:48,875 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,875 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,875 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,875 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,875 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,875 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,876 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 29922
2020-03-21 10:50:48,876 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 29922
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,876 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/b20c0326b97ffc9e718d597d1c9b5c12925b1365?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145048Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=09f70700edab3792142df26274c20b88ad08216a0d5f76afa21a918d13d8d6a5', expecting response codes: [200]
2020-03-21 10:50:48,876 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 220798, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,876 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,876 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,876 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,881 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,881 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:48,898 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: K1La9/9wzmnuat80/nqBITsvngYH9GV0aRbw5hFnr+rS26/kY1SxgqI3WVyrD+zhS72ekRUWbbw=, x-amz-request-id: ACC33AC0405BB577, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: Y_WopRV_9Knn3.jBvkrRjW.ViLHFK8_Z, x-amz-server-side-encryption: AES256, ETag: "2eb987ca55ae8d8ab7fc1bb3d5cb70b0", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,898 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@3cfcad48
2020-03-21 10:50:48,898 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,898 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,898 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="2eb987ca55ae8d8ab7fc1bb3d5cb70b0"
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,898 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,899 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,899 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 0d94821c5be7066467369622cf843af9cae636c9
2020-03-21 10:50:48,899 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@452855db action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,899 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,899 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,906 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: tYskJ7a2MTUdHT2pZaIg/mog5atZeBdEp0iF+le/L9eq4UP/R2UGOSwicGR1AxN5rmWgVl8KN/g=, x-amz-request-id: 10D5EBF67AB6AC79, Date: Sat, 21 Mar 2020 14:50:49 GMT, x-amz-version-id: 9RTk362D2ybh7y2lENumnFAAzcXdMvXD, x-amz-server-side-encryption: AES256, ETag: "894687dbaf28e42ab9c8f7837e2274b9", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:48,906 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@322907c2
2020-03-21 10:50:48,906 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:48,906 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:48,906 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="894687dbaf28e42ab9c8f7837e2274b9"
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:49 GMT' into Date object for key: Date
2020-03-21 10:50:48,906 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:49 EDT 2020
2020-03-21 10:50:48,906 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: c52c8c272f904c94fb6916e94d043ae1b80f8de9
2020-03-21 10:50:48,906 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@c5d42d0 action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,906 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,906 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:48,908 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,908 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:48,913 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:48,913 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:48,956 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,956 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/42ee75f0e45e568c74104fdf5a38b4b13be0408d?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=224d0565688fbab4563b15534aa2268596c92e9a2299689954d09009e6274417
2020-03-21 10:50:48,956 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,956 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,956 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,956 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,956 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,956 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 18564
2020-03-21 10:50:48,956 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 18564
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,956 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/42ee75f0e45e568c74104fdf5a38b4b13be0408d?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=224d0565688fbab4563b15534aa2268596c92e9a2299689954d09009e6274417', expecting response codes: [200]
2020-03-21 10:50:48,956 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 120298, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,956 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,956 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,957 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,957 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,957 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,957 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,971 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,971 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/21d2827fbc4c78dcd48d8586bb5f9be9767a3c89?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=3c5329270e15c3f4f62d6246c5f5b6591e5f305111860cf7936e498f80de7681
2020-03-21 10:50:48,971 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,971 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,971 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,971 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,971 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,971 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,972 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,972 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,972 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 23503
2020-03-21 10:50:48,972 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 23503
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,972 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/21d2827fbc4c78dcd48d8586bb5f9be9767a3c89?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=3c5329270e15c3f4f62d6246c5f5b6591e5f305111860cf7936e498f80de7681', expecting response codes: [200]
2020-03-21 10:50:48,972 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 159536, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,972 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,972 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,972 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:48,979 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:48,979 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/aca8d3652d4b770c6f573e3dfe2f112d03816928?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=1f660ccb3f6c926594ff6b1d976fd50328810e68f631376d821390b9e7af57a5
2020-03-21 10:50:48,979 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:48,979 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:48,980 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:48,980 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:48,980 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,980 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:48,980 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 23806
2020-03-21 10:50:48,980 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 23806
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:48,980 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/aca8d3652d4b770c6f573e3dfe2f112d03816928?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=1f660ccb3f6c926594ff6b1d976fd50328810e68f631376d821390b9e7af57a5', expecting response codes: [200]
2020-03-21 10:50:48,980 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 125922, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:48,980 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:48,980 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:48,980 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,017 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'b20c0326b97ffc9e718d597d1c9b5c12925b1365' - B64:vXAfXaRfiS+BUHyeY+PBKQ== Hex:bd701f5da45f892f81507c9e63e3c129
2020-03-21 10:50:49,036 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '42ee75f0e45e568c74104fdf5a38b4b13be0408d' - B64:5ZW8anQWdst90Wj/6Srdjw== Hex:e595bc6a741676cb7dd168ffe92add8f
2020-03-21 10:50:49,050 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '21d2827fbc4c78dcd48d8586bb5f9be9767a3c89' - B64:0TiEex5Qv8+kY5mF33Yk5w== Hex:d138847b1e50bfcfa4639985df7624e7
2020-03-21 10:50:49,073 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'aca8d3652d4b770c6f573e3dfe2f112d03816928' - B64:2kK1cG6IbOtITXq05aQteg== Hex:da42b5706e886ceb484d7ab4e5a42d7a
2020-03-21 10:50:49,083 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 35wD+IO1bG+IrEVj7l983mEO8HezVCJt7tUXVZZOY+vPl2TtTZRP/2IM4gyCpphAixmYOl1ZXR8=, x-amz-request-id: 21B7D0644418B3B6, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: 85I0CCRey1eD7FdwH.OWAqxIW7377HaB, x-amz-server-side-encryption: AES256, ETag: "bd701f5da45f892f81507c9e63e3c129", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,083 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@39115120
2020-03-21 10:50:49,083 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,083 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,083 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,083 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,083 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,083 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="bd701f5da45f892f81507c9e63e3c129"
2020-03-21 10:50:49,083 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,084 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,084 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,084 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,084 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,084 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,084 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,084 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: b20c0326b97ffc9e718d597d1c9b5c12925b1365
2020-03-21 10:50:49,084 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@1a7b6367 action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:49,084 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:49,084 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,089 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,089 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:49,111 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: O3rFzUXwWlOWCXhLCQlKcA6Y6T6ZZ5r2j+V4WH4J8R4THNF/RfpHJhDijqJBnI5XbBrAQifk0Lo=, x-amz-request-id: 9CCE10711C73CDC2, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: zZ8KgFaxWTAFRWGJwqXib74pIdKikBIb, x-amz-server-side-encryption: AES256, ETag: "d138847b1e50bfcfa4639985df7624e7", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,111 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@1e1de5b1
2020-03-21 10:50:49,111 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,111 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,111 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="d138847b1e50bfcfa4639985df7624e7"
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,111 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,112 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 21d2827fbc4c78dcd48d8586bb5f9be9767a3c89
2020-03-21 10:50:49,112 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@5bc59e66 action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:49,112 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:49,112 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,116 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 6JFe2TkaIhiC15Ed8ZeqwLZGpOk1dCqCD67+i+RE+wi4/vimHcY13J6JdhgHQGw99tLiQgNUta0=, x-amz-request-id: 020E6E2AA71BA77E, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: PxDA_xwMwdkD597LAFxg6zk9BFhrsARM, x-amz-server-side-encryption: AES256, ETag: "e595bc6a741676cb7dd168ffe92add8f", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,116 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@3642b81f
2020-03-21 10:50:49,117 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,117 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,117 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="e595bc6a741676cb7dd168ffe92add8f"
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,117 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,117 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 42ee75f0e45e568c74104fdf5a38b4b13be0408d
2020-03-21 10:50:49,117 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@1618d6f3 action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:49,117 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:49,117 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,124 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,125 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:49,135 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,135 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:49,144 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: rJql9ltJRP+bwAzNyS0/nfxgYQ0NL/WOh7LOWwNhgS0rDtKmae/K7zZ3M3G4GWGMUpuJFjyTlLY=, x-amz-request-id: 349C57D120FF1270, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: zwcQmtMwtnkNSn2Uv_jnVFWQmUCviVw3, x-amz-server-side-encryption: AES256, ETag: "da42b5706e886ceb484d7ab4e5a42d7a", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,144 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@83e2d2b
2020-03-21 10:50:49,144 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,144 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,144 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="da42b5706e886ceb484d7ab4e5a42d7a"
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,144 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,144 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: aca8d3652d4b770c6f573e3dfe2f112d03816928
2020-03-21 10:50:49,144 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@762d6ad1 action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:49,144 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:49,144 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,149 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,149 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:49,155 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,155 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/579161b6ee1736c7a9a8d70fa36b8219a49281d9?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=826d566a6452e84ecff6d311594ddabf87db13f388ed1433519b64f6efbab750
2020-03-21 10:50:49,155 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,155 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,155 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,155 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,155 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,156 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,156 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 11871
2020-03-21 10:50:49,156 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 11871
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,156 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/579161b6ee1736c7a9a8d70fa36b8219a49281d9?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=826d566a6452e84ecff6d311594ddabf87db13f388ed1433519b64f6efbab750', expecting response codes: [200]
2020-03-21 10:50:49,156 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 58684, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,156 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,156 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,156 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,187 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,187 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/4e73de03fe9579d7851adb56353ddb8a2bf4ef11?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=5206ce25aa6c4d32414b09300791c4a28e62a817877e500ed47a80df29c1900d
2020-03-21 10:50:49,187 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,187 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,187 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,187 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,187 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,188 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,188 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 24767
2020-03-21 10:50:49,188 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 24767
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,188 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/4e73de03fe9579d7851adb56353ddb8a2bf4ef11?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=5206ce25aa6c4d32414b09300791c4a28e62a817877e500ed47a80df29c1900d', expecting response codes: [200]
2020-03-21 10:50:49,188 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 151275, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,188 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,188 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,188 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,199 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,200 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/25348ed1d48f369118c52debc186e38afbca0a98?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=03e8faef387b43b5baeec90e3af81ef9b76ad5a8c7d6f60d0ebbfb8883a4ba49
2020-03-21 10:50:49,200 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,200 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,200 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,200 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,200 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,200 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,201 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 103621
2020-03-21 10:50:49,201 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 103621
2020-03-21 10:50:49,201 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,201 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/25348ed1d48f369118c52debc186e38afbca0a98?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=03e8faef387b43b5baeec90e3af81ef9b76ad5a8c7d6f60d0ebbfb8883a4ba49', expecting response codes: [200]
2020-03-21 10:50:49,201 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 379337, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,201 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,201 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,201 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,201 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,201 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,201 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,215 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,215 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/2c4366b2b1cf39c34e878bc5004f0a86f6473af7?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=b2a6e279fba35a9a391948435538dceea659e211f1051f648ea4c6b4e6d77bf0
2020-03-21 10:50:49,215 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,215 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,215 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,215 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,215 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,216 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,216 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 21762
2020-03-21 10:50:49,216 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 21762
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,216 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/2c4366b2b1cf39c34e878bc5004f0a86f6473af7?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=b2a6e279fba35a9a391948435538dceea659e211f1051f648ea4c6b4e6d77bf0', expecting response codes: [200]
2020-03-21 10:50:49,216 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 145023, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,216 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,216 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,217 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,275 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '4e73de03fe9579d7851adb56353ddb8a2bf4ef11' - B64:RVmgYpWfYk7XIaQ0hiaAGA== Hex:4559a062959f624ed721a43486268018
2020-03-21 10:50:49,288 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '25348ed1d48f369118c52debc186e38afbca0a98' - B64:7RBqfJPwvKVdOKavvfQdJw== Hex:ed106a7c93f0bca55d38a6afbdf41d27
2020-03-21 10:50:49,299 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '2c4366b2b1cf39c34e878bc5004f0a86f6473af7' - B64:p0eWYu9jIwpMoHL7SHxiRQ== Hex:a7479662ef63230a4ca072fb487c6245
2020-03-21 10:50:49,344 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '579161b6ee1736c7a9a8d70fa36b8219a49281d9' - B64:CoE/NwVuHVon0+WP7S9krg== Hex:0a813f37056e1d5a27d3e58fed2f64ae
2020-03-21 10:50:49,716 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: LXKoGC8joqJvNEzEBXzY/VyCNnepyHjuPo9VYpUseJnambOAq9P5x++f1daHlOCayBblHAICzoI=, x-amz-request-id: 4280523E369FFEB6, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: XPM5iQzgx7EwBRmVqFZO09MiXvTw5H9y, x-amz-server-side-encryption: AES256, ETag: "4559a062959f624ed721a43486268018", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,716 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@4494cea6
2020-03-21 10:50:49,716 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,716 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,716 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="4559a062959f624ed721a43486268018"
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,716 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,717 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,717 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 4e73de03fe9579d7851adb56353ddb8a2bf4ef11
2020-03-21 10:50:49,717 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@22fcbe68 action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:49,717 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:49,717 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,718 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 4LcdTpe+p6x32lrqoCzfxXi7wRqBW7TOtQeRhqaQHnbUclBwdcmlTjaAEc3VWb/MTk2r+j2UfX0=, x-amz-request-id: 7F6C1F867AA2EBFD, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: KARlDiZfzTYF8gAOmID5rYbNzfBuvSbZ, x-amz-server-side-encryption: AES256, ETag: "a7479662ef63230a4ca072fb487c6245", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,718 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@4542f19b
2020-03-21 10:50:49,718 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,718 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,718 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="a7479662ef63230a4ca072fb487c6245"
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,718 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,719 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,719 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,719 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,719 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 2c4366b2b1cf39c34e878bc5004f0a86f6473af7
2020-03-21 10:50:49,719 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@5669177c action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:49,719 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:49,719 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,723 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,723 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:49,725 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,725 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:49,776 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: jMymbGoENYfgZ6ndTAIG0bDOKOQKwwYCMFruMM7y/iGHaxtT9JuQHKsnn4j3OYhybIYtMEWGp8Q=, x-amz-request-id: 23CEFB70D0CFB1BC, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: ukJaYKyUHe7ZM_wrdSqR2IQOhw3xMxWL, x-amz-server-side-encryption: AES256, ETag: "ed106a7c93f0bca55d38a6afbdf41d27", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,776 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@2b8620f2
2020-03-21 10:50:49,776 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,776 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,776 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,776 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="ed106a7c93f0bca55d38a6afbdf41d27"
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,777 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,777 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 25348ed1d48f369118c52debc186e38afbca0a98
2020-03-21 10:50:49,777 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@54a53eb7 action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:49,777 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:49,777 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,783 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,783 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:49,783 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: TB0n7T61RITXkKHPmT9S41MyO+2mR11Z0XIui4I/RYfPZKGObPiI7/N9+oDE4qvoNR+/22xNnjw=, x-amz-request-id: B50DD4CB2779F73E, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: ULoUAZmcsxEvV4364iTk8bzFnrg_eoao, x-amz-server-side-encryption: AES256, ETag: "0a813f37056e1d5a27d3e58fed2f64ae", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:49,783 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@6bf4461e
2020-03-21 10:50:49,783 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:49,783 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:49,783 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="0a813f37056e1d5a27d3e58fed2f64ae"
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:49,783 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:49,784 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 579161b6ee1736c7a9a8d70fa36b8219a49281d9
2020-03-21 10:50:49,784 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@3b9b3c22 action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:49,784 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:49,784 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:49,789 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:49,789 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:49,824 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,824 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/ea1b4a994952eb9494179ef8885f8edff78de9aa?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=e82dfd8c1f8eb11d44d3997ca1ca62e33824a96724fe86b9805d4958e3cf34e9
2020-03-21 10:50:49,824 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,824 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,824 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,824 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,824 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,824 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,824 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,824 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,824 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,825 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,825 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,825 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,825 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/942d87af92f4010e7ba7f34c151007c8893bcf04?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=2690d97eb3ee8bc8f10077e877947f603e5a95619b6aad23e475feba4ed0eb5d
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,825 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 27044
2020-03-21 10:50:49,825 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,825 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 27044
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,825 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/ea1b4a994952eb9494179ef8885f8edff78de9aa?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=e82dfd8c1f8eb11d44d3997ca1ca62e33824a96724fe86b9805d4958e3cf34e9', expecting response codes: [200]
2020-03-21 10:50:49,825 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 152949, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,825 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,825 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,825 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,825 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,825 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,826 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,826 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,826 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 28513
2020-03-21 10:50:49,826 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 28513
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,826 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/942d87af92f4010e7ba7f34c151007c8893bcf04?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=2690d97eb3ee8bc8f10077e877947f603e5a95619b6aad23e475feba4ed0eb5d', expecting response codes: [200]
2020-03-21 10:50:49,826 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 163502, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,826 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,826 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,826 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,882 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,882 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/a3f5f0cc0bb997d38260f0e076f1568e2c165d52?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=8c18b0f013ce265b4877ec91466fde381b95d93dda2d6d09fe151e84f1b10901
2020-03-21 10:50:49,882 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,882 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,882 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,882 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,882 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,882 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,883 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 16529
2020-03-21 10:50:49,883 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 16529
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,883 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/a3f5f0cc0bb997d38260f0e076f1568e2c165d52?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJIMEYCIQDF7McXNQ1MQU8NADDsqPd9f0jeF7LxHD0FEL4PHgbdtAIhAKn%2BhZaJ72eTovkpat3qKzArwTXNZmDrN7HIm2QL57csKrQDCBgQARoMODcyNjkzNzYwMDY2IgxNf%2Fj6vcvsMFE6OSIqkQNiPt803kihK56AGJy7oi5zfx%2FemMDfX8Bz7qHwfSAW9DhOpTE0tvj195GT4%2BFbtYcsd%2BFT8PqGEUJVX8WWO73HiMNIKy5c15RvCFk2Y8dWENoa0aKXOD%2FXG9%2Fa%2BcYSP43a6aZZe7qS2uVvWNZRWRSSpJqs60dRoAbaHvZg6cOVHbSIUg6dXcwjXC9pLJ2VL87SLy%2F0AWINM1d4tbQ2fT%2Bl9gEtVkkoLj9%2F5jKJsIPMpKiDT0dgBO55mqaturXsLNWK8beBpM7wq7CjpB1%2BjjrSwCRQY0VaqXqUPnn5%2B5%2FMn6AO%2BUs%2FNzmycY9U28cbI3LKPnIVhke%2Frwa041gd8Zk5hR5xFILOUUXnyMwZnBBfl1GjWXlWkYREQzRtTLXvm%2BFjQH7lRJTzdwiRgOk0dlAm7nLbDkl5y4KmH5%2BmxdUDThHgflGLfl9fK0kDvi9nDC7TSf%2BaO5TIRJgmLYuS%2Fl8gAcj0Em5u8ncJd5J8pYXOLEk7qQWZMWJGIPr60AWetFGUhA6w6XdPHZ2tTkHgt2MpiTDsztjzBTrqAR%2BC7iBT5V0dTJGrGreVVBBfhPgs1sCFBj%2Fy4CQ1XU%2BTd7TU8d1vM3S8P9bibHmOBKyM3VUQIKcG8gE7vsbzK5M3ALN1Lu7zPD3Bmzd8t2nKt%2FrEFprtVyV8Ume54MDB%2B8C6RE3pkpd%2B%2F3BLphuQmmVtMuzKENlDmHSb%2BYpGUWcLwyJ4gGc0brw%2Bd7wKjGxMBZHBPTAtLcv2LURLje14RZ25FRp9l6M7It%2BQqgBUv%2Fa5jjTFNMtXXb%2FnEnccSFkqjd%2FBJ%2Bsh%2BIQwWK8FSaDrQsM1G9gljl03IpZquJ%2FSkG2mxCfWLkYJq1Q54w%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBKTR7WKXE%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=8c18b0f013ce265b4877ec91466fde381b95d93dda2d6d09fe151e84f1b10901', expecting response codes: [200]
2020-03-21 10:50:49,883 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 104898, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,883 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,883 EDT  INFO CLIFileSyncClient$$anon$7 - Signing headers:
2020-03-21 10:50:49,883 EDT  INFO CLIFileSyncClient$$anon$7 - Generated signed PUT url: https://prod-domino-users.s3.amazonaws.com/7b94cfc2d57608bebfeeb0bea6068872c8e7c1eb?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=e98d0226802ebf51610e82a17c5316c67851f26a52f934187725d37c4795a43b
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,883 EDT  INFO CLIFileSyncClient$$anon$7 - Starting signed PUT request
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - s3service.https-only=true
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - storage-service.internal-error-retry-max=5
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - storage-service.apply-recommended-dns-caching-defaults=true
2020-03-21 10:50:49,883 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,883 EDT DEBUG StorageService - Setting recommended DNS caching defaults
2020-03-21 10:50:49,883 EDT DEBUG StorageService - Using DNS caching system settings: networkaddress.cache.ttl=300, networkaddress.cache.negative.ttl=1
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - http.connection-manager.factory-class-name=org.jets3t.service.utils.RestUtils$ConnManagerFactory
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.connection-timeout-ms=60000
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.socket-timeout-ms=60000
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.stale-checking-enabled=true
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - httpclient.useragent=null
2020-03-21 10:50:49,883 EDT DEBUG RestUtils - Setting user agent string: JetS3t/0.9.4 (Mac OS X/10.14.5; x86_64; en; JVM 1.8.0_241)
2020-03-21 10:50:49,883 EDT DEBUG Jets3tProperties - http.protocol.expect-continue=true
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.connection-manager-timeout=0
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.proxy-autodetect=true
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,884 EDT DEBUG RestUtils - Unable to set proxy configuration
java.lang.NoClassDefFoundError: Could not initialize class org.apache.commons.httpclient.contrib.proxy.PluginProxyUtil
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:511)
	at org.jets3t.service.utils.RestUtils.initHttpProxy(RestUtils.java:388)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeProxy(RestStorageService.java:173)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.initializeDefaults(RestStorageService.java:167)
	at org.jets3t.service.StorageService.<init>(StorageService.java:126)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.<init>(RestStorageService.java:153)
	at org.jets3t.service.S3Service.<init>(S3Service.java:96)
	at org.jets3t.service.impl.rest.httpclient.RestS3Service.<init>(RestS3Service.java:150)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore$.domino$client$sync$AnonymousS3SingleProjectBlobStore$$makeAnonymousS3Service(AnonymousS3SingleProjectBlobStore.scala:86)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - s3service.default-storage-class=null
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - s3service.server-side-encryption=null
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - devpay.user-token=null
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - devpay.product-token=null
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.requester-pays-buckets-enabled=false
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - storage-service.disable-live-md5=false
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - s3service.s3-endpoint=s3.amazonaws.com
2020-03-21 10:50:49,884 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream domino.common.sync.ConsoleProgressMonitoredInputStream assuming it doesn't use in-memory storage: 16688
2020-03-21 10:50:49,884 EDT DEBUG RepeatableRequestEntity - Setting maximal read-ahead mark limit for markable input stream java.io.ByteArrayInputStream assuming it doesn't use in-memory storage: 16688
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.read-throttle=0
2020-03-21 10:50:49,884 EDT DEBUG RestStorageService - Performing PUT request for 'https://prod-domino-users.s3.amazonaws.com/7b94cfc2d57608bebfeeb0bea6068872c8e7c1eb?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEB8aCXVzLWVhc3QtMSJHMEUCIQCJkAaKjMe%2F%2Bmox2FyWSbHs37%2BoNFBdHyjeW8OlBNpMtgIgGEiWomP6NS%2BZMGmLyFI7nmOD%2FHutjDnbQTQFQhFwvJ0qtAMIFxABGgw4NzI2OTM3NjAwNjYiDETWD1eXpFwqQ2qIsyqRA88itNS%2B39d%2B61wm0yLJJD6yFCaDkuhTG03XSJ%2BsvX0Hz855hHrdXQR6clYp81CjEebCOG1mFeoWwbTRs7lmHTNUEAgrRqSmkbHNHfXfWK37%2BiLQyLgUVgtyHS7gnNpg6p9FDOqIyaRj%2BXqCx%2FUHDjbJ2RQzNWIyxUiAkKwQa%2Beg5z%2F%2BjLyWsrTRCtxc2IeiGuqqrTj8Qq0BAFkz7FmU8RtU1nzC9Bi7ekGW%2FpvyrYdE%2BBAYckjHMFgPythMkRhFHarKEsBg4dWabc4Jy35DDt%2F77JZWaZLvL82pv%2B%2F2SyPPN8r15u0xZqN7cONgRo3dCWBtPdh8xQXLXJkj2iq7PXIWKc523lzguqm44%2BIpLCpaHRjr5KonHh3HS%2Fox2WY3I2rM0s2Nc1yrxkFRunt%2B9HHSllyqyMvcw0xbzSI0nwAchRqPH%2F7E27V5DKm%2BZOL5DZKjnlXr045%2FaLtQAk%2Fsw1tRqU6jLgJF%2FpkpTad5fZp8WQ9IxMQSO5ntN2DR0qIMu6cmYDGkTwYH7qNnhmSiRBw%2FMNHE2PMFOusB4hsnDVplPLzr9627N3S5Vnz2kqn9Lm8%2Bq%2BEt7EmUoYw09yau3mm%2FsHbB8K1d3rhAQlF5vWoEy9mGl1Lcc1hWsqZvXIzoRZyQL7H%2BVd35teN9TLTQ475o8FUi9pjfwEtizg%2FRChA827apDkNsibi4yCj%2BY4XUIEk%2B5b7nuzTKwCvXT%2F30ti7B9YkjrQEfbpyqKo37wBxb%2FhgQpD7yP%2BRxyNA%2BUvyQGQX48lmiFBaq6Ratc4XRmDdgjOwJ%2FXCmfVmZkFjh6PY%2BaB9AEbWazaNrKflx1tyPELsJKcTtCjB8HxCWhZlV2Eon%2FpNjfA%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200321T145049Z&X-Amz-SignedHeaders=content-encoding%3Bcontent-length%3Bcontent-type%3Bhost%3Bx-amz-meta-domino-compress%3Bx-amz-meta-domino-original-blob-length%3Bx-amz-server-side-encryption&X-Amz-Expires=300&X-Amz-Credential=ASIA4WME2ABBM377BIN4%2F20200321%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=e98d0226802ebf51610e82a17c5316c67851f26a52f934187725d37c4795a43b', expecting response codes: [200]
2020-03-21 10:50:49,884 EDT DEBUG RestStorageService - Headers: [Content-Encoding: gzip, x-amz-meta-domino-original-blob-length: 101392, x-amz-server-side-encryption: AES256, x-amz-meta-domino-compress: gzip, Content-Type: application/x-gzip]
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.retry-max=5
2020-03-21 10:50:49,884 EDT DEBUG RestStorageService - Service has no Credential and is un-authenticated, skipping authorization
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.max-connections=20
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.max-connections-per-host=0
2020-03-21 10:50:49,884 EDT DEBUG Jets3tProperties - httpclient.connection.ttl=-1
2020-03-21 10:50:49,884 EDT DEBUG RestUtils$ThreadSafeConnManager - Get connection: {s}->https://prod-domino-users.s3.amazonaws.com:443, timeout = 0
2020-03-21 10:50:49,904 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '942d87af92f4010e7ba7f34c151007c8893bcf04' - B64:oJxS9hTYpRpwXzAghiwdfQ== Hex:a09c52f614d8a51a705f3020862c1d7d
2020-03-21 10:50:49,936 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'ea1b4a994952eb9494179ef8885f8edff78de9aa' - B64:e1Ix5PJnT4jB8Uss7Uy6UA== Hex:7b5231e4f2674f88c1f14b2ced4cba50
2020-03-21 10:50:50,286 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: yU5hSdsbaXpdWpMzTVg9loC+gut4IRnOKojpCBO3nCd4+t1pb7FW26ftsk7vOiKIMZK6cT0s4go=, x-amz-request-id: 041746A9BB0F4B31, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: Cubw1ylyzo2btHX7RPoedygHJBQYkf0O, x-amz-server-side-encryption: AES256, ETag: "a09c52f614d8a51a705f3020862c1d7d", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:50,287 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@11c913f6
2020-03-21 10:50:50,287 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:50,287 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:50,287 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="a09c52f614d8a51a705f3020862c1d7d"
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:50,287 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:50,287 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 942d87af92f4010e7ba7f34c151007c8893bcf04
2020-03-21 10:50:50,287 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@260abdb6 action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:50,287 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:50,287 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:50,293 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for 'a3f5f0cc0bb997d38260f0e076f1568e2c165d52' - B64:n/F5JRlV0WNLQe76lWnN9A== Hex:9ff179251955d1634b41eefa9569cdf4
2020-03-21 10:50:50,295 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:50,295 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"
2020-03-21 10:50:50,301 EDT DEBUG RepeatableRequestEntity - MD5 digest of data sent for '7b94cfc2d57608bebfeeb0bea6068872c8e7c1eb' - B64:mW3maUHzqmqbkhfY+lgBtA== Hex:996de66941f3aa6a9b9217d8fa5801b4
2020-03-21 10:50:50,336 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: L32Ltra7ykjkLO43fyxyXQ1Niqm/RIghor9SrwpQJUXP2+rNUCrgUBUmJkOw0TJCtjjxlZzNfmE=, x-amz-request-id: 96E15AF7BB672570, Date: Sat, 21 Mar 2020 14:50:50 GMT, x-amz-version-id: jq_ZeGregbxjeOL.zh.FaGVff0zvFyB1, x-amz-server-side-encryption: AES256, ETag: "7b5231e4f2674f88c1f14b2ced4cba50", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:50,336 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@48fef3cd
2020-03-21 10:50:50,336 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:50,336 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:50,336 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="7b5231e4f2674f88c1f14b2ced4cba50"
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:50 GMT' into Date object for key: Date
2020-03-21 10:50:50,336 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:50 EDT 2020
2020-03-21 10:50:50,336 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: ea1b4a994952eb9494179ef8885f8edff78de9aa
2020-03-21 10:50:50,336 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@71e6e7aa action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:50,336 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:50,336 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:50,340 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:50,340 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"
2020-03-21 10:50:50,372 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/blobs/signedPutUrl/11d266c36d38d866df790d4034342c5af7698c18/197256?Content-Encoding=gzip&x-amz-meta-domino-original-blob-length=197256&x-amz-server-side-encryption=AES256&x-amz-meta-domino-compress=gzip&Content-Length=29066&Content-Type=application/x-gzip,POST,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),120 seconds,60 seconds,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,374 EDT ERROR OAuthBasedTransport - HTTP exception: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  body: 
2020-03-21 10:50:50,376 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
2020-03-21 10:50:50,376 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
2020-03-21 10:50:50,376 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=23798 context: [action="Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ..." operation="upload"]
2020-03-21 10:50:50,376 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,376 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ... context: [action="Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ..." operation="upload"]
2020-03-21 10:50:50,376 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,399 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d060353532f317a6e3099f86ab0c93e51a2db1a0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,400 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,400 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ..., timesToRetry = 2
2020-03-21 10:50:50,400 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ... context: [action="Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ..." operation="upload"]
2020-03-21 10:50:50,400 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,410 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: GBH5dhFVmFJ0HQ/QVL99EWHKLQrEB009XU1UJdKwMyiy8lEDzykGf8KtmwIu+rA2qbHoGRviOtM=, x-amz-request-id: E52687E12944827A, Date: Sat, 21 Mar 2020 14:50:51 GMT, x-amz-version-id: JgXyfY8lC32tHLW4oRY4TmPCvM_rwaw1, x-amz-server-side-encryption: AES256, ETag: "9ff179251955d1634b41eefa9569cdf4", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:50,410 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@4c59aa01
2020-03-21 10:50:50,410 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:50,410 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:50,410 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="9ff179251955d1634b41eefa9569cdf4"
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:51 GMT' into Date object for key: Date
2020-03-21 10:50:50,410 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:51 EDT 2020
2020-03-21 10:50:50,410 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/blobs/signedPutUrl/a215facb05ad74ae8b0d7854bb6f44e84ea9c691/26723?Content-Encoding=gzip&x-amz-meta-domino-original-blob-length=26723&x-amz-server-side-encryption=AES256&x-amz-meta-domino-compress=gzip&Content-Length=5660&Content-Type=application/x-gzip,POST,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),120 seconds,60 seconds,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,410 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: a3f5f0cc0bb997d38260f0e076f1568e2c165d52
2020-03-21 10:50:50,410 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@2ff3201f action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:50,411 EDT ERROR OAuthBasedTransport - HTTP exception: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  body: 
2020-03-21 10:50:50,411 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:50,411 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:50,411 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
2020-03-21 10:50:50,411 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
2020-03-21 10:50:50,411 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=23573 context: [action="Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ..." operation="upload"]
2020-03-21 10:50:50,411 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,412 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ... context: [action="Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ..." operation="upload"]
2020-03-21 10:50:50,412 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,417 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:50,417 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"
2020-03-21 10:50:50,422 EDT DEBUG RestStorageService - Response for 'PUT'. Content-Type: , Headers: [x-amz-id-2: 3CIyZhoSZfebkY/12hwEyAvwSAYVya71bPvMlyunCXvdv5xBPUWj/ztyQxBIkPEb8boGaE9TouY=, x-amz-request-id: 64C9A94DD526766D, Date: Sat, 21 Mar 2020 14:50:51 GMT, x-amz-version-id: WrKvuEWzfJWGDyddohWDaI99ikQZFBu2, x-amz-server-side-encryption: AES256, ETag: "996de66941f3aa6a9b9217d8fa5801b4", Content-Length: 0, Server: AmazonS3]
2020-03-21 10:50:50,422 EDT DEBUG RestStorageService - Response entity: org.apache.http.conn.BasicManagedEntity@453e61cf
2020-03-21 10:50:50,422 EDT DEBUG RestStorageService - Entity length: 0
2020-03-21 10:50:50,422 EDT DEBUG RestStorageService - Received response code 200; matches one of expected set ([200])? true
2020-03-21 10:50:50,422 EDT DEBUG RestUtils$ThreadSafeConnManager - Released connection is reusable.
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Processing REST metadata items
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Ignoring metadata item: Server=AmazonS3
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Leaving header item unchanged: ETag="996de66941f3aa6a9b9217d8fa5801b4"
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-request-id=>request-id
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-id-2=>id-2
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-server-side-encryption=>server-side-encryption
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Leaving HTTP header item unchanged: Content-Length=0
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Removed header prefix x-amz- from key: x-amz-version-id=>version-id
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Parsing date string 'Sat, 21 Mar 2020 14:50:51 GMT' into Date object for key: Date
2020-03-21 10:50:50,422 EDT DEBUG ServiceUtils - Leaving header item unchanged: Date=Sat Mar 21 10:50:51 EDT 2020
2020-03-21 10:50:50,422 EDT DEBUG RestStorageService - Object upload was automatically verified, the calculated MD5 hash value matched the ETag returned by S3: 7b94cfc2d57608bebfeeb0bea6068872c8e7c1eb
2020-03-21 10:50:50,423 EDT TRACE CLIFileSyncClient$$anon$3 - uploaded blob: domino.common.sync.VerifiedBlob@77f7c20d action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:50,423 EDT TRACE CLIFileSyncClient$$anon$3 - starting zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:50,423 EDT DEBUG InMemoryZippedS3ContentSetter - Started compressing
2020-03-21 10:50:50,424 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d060353532f317a6e3099f86ab0c93e51a2db1a0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,424 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,424 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ..., timesToRetry = 1
2020-03-21 10:50:50,424 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ... context: [action="Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ..." operation="upload"]
2020-03-21 10:50:50,424 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,426 EDT DEBUG InMemoryZippedS3ContentSetter - Completed compressing
2020-03-21 10:50:50,427 EDT TRACE CLIFileSyncClient$$anon$3 - completed zip of: blob action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"
2020-03-21 10:50:50,433 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a2ec3271c4b28fdc0de8a7f28b8c6233a917db86,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,433 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,434 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ..., timesToRetry = 2
2020-03-21 10:50:50,434 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ... context: [action="Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ..." operation="upload"]
2020-03-21 10:50:50,434 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,447 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d060353532f317a6e3099f86ab0c93e51a2db1a0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,447 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,447 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,447 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=71 context: [action="Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ..." operation="upload"]
2020-03-21 10:50:50,448 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,448 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ... context: [action="Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ..." operation="upload"]
2020-03-21 10:50:50,448 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,461 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a2ec3271c4b28fdc0de8a7f28b8c6233a917db86,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,461 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,462 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ..., timesToRetry = 1
2020-03-21 10:50:50,462 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ... context: [action="Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ..." operation="upload"]
2020-03-21 10:50:50,462 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,766 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a2ec3271c4b28fdc0de8a7f28b8c6233a917db86,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,766 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/blobs/signedPutUrl/fc442ff2238bb3c9613f4939e9c0e2ed5fd10fbe/129591?Content-Encoding=gzip&x-amz-meta-domino-original-blob-length=129591&x-amz-server-side-encryption=AES256&x-amz-meta-domino-compress=gzip&Content-Length=20138&Content-Type=application/x-gzip,POST,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),120 seconds,60 seconds,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,766 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,766 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/93cba21db9b6f749fa19fac39ef4454f396c9946,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,767 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,766 EDT ERROR OAuthBasedTransport - HTTP exception: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  body: 
2020-03-21 10:50:50,767 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=355 context: [action="Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ..." operation="upload"]
2020-03-21 10:50:50,767 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,767 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,767 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ..., timesToRetry = 2
2020-03-21 10:50:50,767 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ... context: [action="Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ..." operation="upload"]
2020-03-21 10:50:50,767 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 38 more
2020-03-21 10:50:50,767 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,768 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..., timesToRetry = 2
2020-03-21 10:50:50,767 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ... context: [action="Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ..." operation="upload"]
2020-03-21 10:50:50,768 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ... context: [action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"]
2020-03-21 10:50:50,768 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,768 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,788 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/blobs/signedPutUrl/4eecf5e6b5b7b114d4a934fe9a0b238240f1b6e0/72048?Content-Encoding=gzip&x-amz-meta-domino-original-blob-length=72048&x-amz-server-side-encryption=AES256&x-amz-meta-domino-compress=gzip&Content-Length=13246&Content-Type=application/x-gzip,POST,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),120 seconds,60 seconds,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,788 EDT ERROR OAuthBasedTransport - HTTP exception: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  body: 
2020-03-21 10:50:50,788 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
2020-03-21 10:50:50,788 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ...
domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
2020-03-21 10:50:50,789 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=22912 context: [action="Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ..." operation="upload"]
2020-03-21 10:50:50,789 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,789 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ... context: [action="Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ..." operation="upload"]
2020-03-21 10:50:50,789 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,790 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/93cba21db9b6f749fa19fac39ef4454f396c9946,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,790 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/98e18db6eefc36d39b753a4259671c20ef165aa1,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,790 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,790 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,790 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ..., timesToRetry = 1
2020-03-21 10:50:50,791 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..., timesToRetry = 1
2020-03-21 10:50:50,791 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ... context: [action="Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ..." operation="upload"]
2020-03-21 10:50:50,791 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ... context: [action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"]
2020-03-21 10:50:50,791 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,791 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,791 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/6eda546bdd5d3fa49e3ce4dae598bac7748ca262,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,791 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,791 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ..., timesToRetry = 2
2020-03-21 10:50:50,791 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ... context: [action="Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ..." operation="upload"]
2020-03-21 10:50:50,791 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,811 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/856aa27651d02e1cfcebc4bba0bbd1679a30a318,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,811 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,811 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ..., timesToRetry = 2
2020-03-21 10:50:50,811 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ... context: [action="Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ..." operation="upload"]
2020-03-21 10:50:50,811 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,812 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/98e18db6eefc36d39b753a4259671c20ef165aa1,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,812 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,812 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,813 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=9412 context: [action="Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ..." operation="upload"]
2020-03-21 10:50:50,813 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,813 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ... context: [action="Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ..." operation="upload"]
2020-03-21 10:50:50,813 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,813 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/93cba21db9b6f749fa19fac39ef4454f396c9946,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,813 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,814 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,814 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=366 context: [action="Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ..." operation="upload"]
2020-03-21 10:50:50,814 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/6eda546bdd5d3fa49e3ce4dae598bac7748ca262,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,814 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,814 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ... context: [action="Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ..." operation="upload"]
2020-03-21 10:50:50,814 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,814 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ..., timesToRetry = 1
2020-03-21 10:50:50,814 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,814 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ... context: [action="Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ..." operation="upload"]
2020-03-21 10:50:50,814 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,835 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/856aa27651d02e1cfcebc4bba0bbd1679a30a318,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,835 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/57d7498b5e658eafc1c149cbbed36105f5a8dae9,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,835 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,836 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ..., timesToRetry = 1
2020-03-21 10:50:50,835 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,837 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ..., timesToRetry = 2
2020-03-21 10:50:50,837 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ... context: [action="Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ..." operation="upload"]
2020-03-21 10:50:50,836 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/540aec41fe93f03a788a0cce4f4c91220cdf22cd,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,837 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,836 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ... context: [action="Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ..." operation="upload"]
2020-03-21 10:50:50,837 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,837 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,837 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ..., timesToRetry = 2
2020-03-21 10:50:50,837 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ... context: [action="Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ..." operation="upload"]
2020-03-21 10:50:50,837 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,839 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/6eda546bdd5d3fa49e3ce4dae598bac7748ca262,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,839 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,839 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,839 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=72 context: [action="Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ..." operation="upload"]
2020-03-21 10:50:50,839 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,839 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ... context: [action="Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ..." operation="upload"]
2020-03-21 10:50:50,839 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,857 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/57d7498b5e658eafc1c149cbbed36105f5a8dae9,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,857 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,858 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ..., timesToRetry = 1
2020-03-21 10:50:50,858 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ... context: [action="Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ..." operation="upload"]
2020-03-21 10:50:50,858 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,858 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/856aa27651d02e1cfcebc4bba0bbd1679a30a318,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,859 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,859 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,859 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=70 context: [action="Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ..." operation="upload"]
2020-03-21 10:50:50,859 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,859 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ... context: [action="Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ..." operation="upload"]
2020-03-21 10:50:50,859 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,860 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/540aec41fe93f03a788a0cce4f4c91220cdf22cd,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,860 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,860 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ..., timesToRetry = 1
2020-03-21 10:50:50,860 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ... context: [action="Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ..." operation="upload"]
2020-03-21 10:50:50,861 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,861 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4076f6e3d2562b04c437cdc5d59b6c8c4026d65d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,861 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,861 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ..., timesToRetry = 2
2020-03-21 10:50:50,861 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ... context: [action="Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ..." operation="upload"]
2020-03-21 10:50:50,861 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,876 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/57d7498b5e658eafc1c149cbbed36105f5a8dae9,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,876 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,876 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,876 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=63 context: [action="Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ..." operation="upload"]
2020-03-21 10:50:50,876 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,876 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ... context: [action="Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ..." operation="upload"]
2020-03-21 10:50:50,876 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,881 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/76082875fca9b9325abac70d9eb260cb868d4b05,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,881 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,881 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ..., timesToRetry = 2
2020-03-21 10:50:50,881 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ... context: [action="Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ..." operation="upload"]
2020-03-21 10:50:50,881 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,887 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4076f6e3d2562b04c437cdc5d59b6c8c4026d65d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,887 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/540aec41fe93f03a788a0cce4f4c91220cdf22cd,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,887 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,887 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,887 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ..., timesToRetry = 1
2020-03-21 10:50:50,887 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,887 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ... context: [action="Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ..." operation="upload"]
2020-03-21 10:50:50,887 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=73 context: [action="Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ..." operation="upload"]
2020-03-21 10:50:50,887 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,887 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,887 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ... context: [action="Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ..." operation="upload"]
2020-03-21 10:50:50,887 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,896 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/da47b791879dba8752bb2af85dc700995f81c6cf,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,896 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,897 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ..., timesToRetry = 2
2020-03-21 10:50:50,897 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ... context: [action="Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ..." operation="upload"]
2020-03-21 10:50:50,897 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,901 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/76082875fca9b9325abac70d9eb260cb868d4b05,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,901 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,901 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ..., timesToRetry = 1
2020-03-21 10:50:50,901 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ... context: [action="Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ..." operation="upload"]
2020-03-21 10:50:50,901 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,910 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4076f6e3d2562b04c437cdc5d59b6c8c4026d65d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,910 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f7f4859bdb5374b5cc91f17a25796b57861313ca,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,911 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,911 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,911 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=72 context: [action="Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ..." operation="upload"]
2020-03-21 10:50:50,911 EDT  INFO CLIFileSyncClient$$anon$8 - performTransferActions(..) completed 6 out of 10
2020-03-21 10:50:50,911 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,911 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ..., timesToRetry = 2
2020-03-21 10:50:50,911 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,911 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ... context: [action="Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ..." operation="upload"]
2020-03-21 10:50:50,911 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ... context: [action="Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ..." operation="upload"]
2020-03-21 10:50:50,911 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,911 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,917 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/da47b791879dba8752bb2af85dc700995f81c6cf,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,917 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,917 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ..., timesToRetry = 1
2020-03-21 10:50:50,917 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ... context: [action="Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ..." operation="upload"]
2020-03-21 10:50:50,917 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,920 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/76082875fca9b9325abac70d9eb260cb868d4b05,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,920 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,920 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,921 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=61 context: [action="Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ..." operation="upload"]
2020-03-21 10:50:50,921 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,921 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ... context: [action="Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ..." operation="upload"]
2020-03-21 10:50:50,921 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,933 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f7f4859bdb5374b5cc91f17a25796b57861313ca,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,933 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,933 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ..., timesToRetry = 1
2020-03-21 10:50:50,933 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ... context: [action="Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ..." operation="upload"]
2020-03-21 10:50:50,933 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,935 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,935 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,935 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ..., timesToRetry = 2
2020-03-21 10:50:50,935 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ... context: [action="Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ..." operation="upload"]
2020-03-21 10:50:50,935 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,936 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/da47b791879dba8752bb2af85dc700995f81c6cf,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,936 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,936 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,936 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=60 context: [action="Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ..." operation="upload"]
2020-03-21 10:50:50,936 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,936 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ... context: [action="Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ..." operation="upload"]
2020-03-21 10:50:50,936 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,941 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/65fcff2487028c2aec410830886683404f003512,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,941 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,941 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ..., timesToRetry = 2
2020-03-21 10:50:50,941 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ... context: [action="Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ..." operation="upload"]
2020-03-21 10:50:50,941 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,953 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f7f4859bdb5374b5cc91f17a25796b57861313ca,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,953 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,953 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,954 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=67 context: [action="Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ..." operation="upload"]
2020-03-21 10:50:50,954 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,954 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ... context: [action="Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ..." operation="upload"]
2020-03-21 10:50:50,954 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,956 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,956 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/624e03c79467bded22b885e5f1bbb4a62d951a24,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,957 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,957 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ..., timesToRetry = 1
2020-03-21 10:50:50,957 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,957 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ..., timesToRetry = 2
2020-03-21 10:50:50,957 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ... context: [action="Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ..." operation="upload"]
2020-03-21 10:50:50,957 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ... context: [action="Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ..." operation="upload"]
2020-03-21 10:50:50,957 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,957 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,961 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/65fcff2487028c2aec410830886683404f003512,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,961 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,962 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ..., timesToRetry = 1
2020-03-21 10:50:50,962 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ... context: [action="Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ..." operation="upload"]
2020-03-21 10:50:50,962 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,972 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/77802cc089a7b6fbebeb976236113966075275ac,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,972 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,972 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ..., timesToRetry = 2
2020-03-21 10:50:50,972 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ... context: [action="Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ..." operation="upload"]
2020-03-21 10:50:50,972 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,977 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,977 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/624e03c79467bded22b885e5f1bbb4a62d951a24,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,977 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,977 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,978 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=66 context: [action="Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ..." operation="upload"]
2020-03-21 10:50:50,977 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,978 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ..., timesToRetry = 1
2020-03-21 10:50:50,978 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,978 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ... context: [action="Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ..." operation="upload"]
2020-03-21 10:50:50,978 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ... context: [action="Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ..." operation="upload"]
2020-03-21 10:50:50,978 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,978 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,980 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/65fcff2487028c2aec410830886683404f003512,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,980 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,980 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,980 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=59 context: [action="Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ..." operation="upload"]
2020-03-21 10:50:50,980 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,980 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ... context: [action="Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ..." operation="upload"]
2020-03-21 10:50:50,980 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,993 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/77802cc089a7b6fbebeb976236113966075275ac,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,993 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,993 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ..., timesToRetry = 1
2020-03-21 10:50:50,993 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ... context: [action="Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ..." operation="upload"]
2020-03-21 10:50:50,993 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:50,998 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/624e03c79467bded22b885e5f1bbb4a62d951a24,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:50,998 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,998 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:50,998 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=62 context: [action="Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ..." operation="upload"]
2020-03-21 10:50:50,999 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:50,999 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ... context: [action="Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ..." operation="upload"]
2020-03-21 10:50:50,999 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,000 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/758d72a1e340a83c1898a03b88561048907726b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,000 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,000 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ..., timesToRetry = 2
2020-03-21 10:50:51,000 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ... context: [action="Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ..." operation="upload"]
2020-03-21 10:50:51,000 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,290 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a4949f7fa9b5e07e847c0f836cf9b976064b6b2c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,290 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,291 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ..., timesToRetry = 2
2020-03-21 10:50:51,291 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/77802cc089a7b6fbebeb976236113966075275ac,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,291 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ... context: [action="Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ..." operation="upload"]
2020-03-21 10:50:51,291 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,291 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,291 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,291 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=337 context: [action="Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ..." operation="upload"]
2020-03-21 10:50:51,291 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,291 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ... context: [action="Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ..." operation="upload"]
2020-03-21 10:50:51,291 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,310 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/460394106db71f9169a0f9c9d0758f0c8b4402f6,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,310 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,310 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ..., timesToRetry = 2
2020-03-21 10:50:51,310 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/758d72a1e340a83c1898a03b88561048907726b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,310 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ... context: [action="Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ..." operation="upload"]
2020-03-21 10:50:51,310 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,310 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,311 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ..., timesToRetry = 1
2020-03-21 10:50:51,311 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ... context: [action="Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ..." operation="upload"]
2020-03-21 10:50:51,311 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,313 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a4949f7fa9b5e07e847c0f836cf9b976064b6b2c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,313 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,314 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ..., timesToRetry = 1
2020-03-21 10:50:51,314 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ... context: [action="Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ..." operation="upload"]
2020-03-21 10:50:51,314 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,314 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,314 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,314 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ..., timesToRetry = 2
2020-03-21 10:50:51,314 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ... context: [action="Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ..." operation="upload"]
2020-03-21 10:50:51,314 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,331 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/460394106db71f9169a0f9c9d0758f0c8b4402f6,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,332 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,332 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ..., timesToRetry = 1
2020-03-21 10:50:51,332 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ... context: [action="Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ..." operation="upload"]
2020-03-21 10:50:51,332 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,333 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/758d72a1e340a83c1898a03b88561048907726b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,333 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,333 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a4949f7fa9b5e07e847c0f836cf9b976064b6b2c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,334 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,334 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=354 context: [action="Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ..." operation="upload"]
2020-03-21 10:50:51,334 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,334 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,334 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=356 context: [action="Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ..." operation="upload"]
2020-03-21 10:50:51,334 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,334 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,334 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ... context: [action="Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ..." operation="upload"]
2020-03-21 10:50:51,334 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ... context: [action="Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ..." operation="upload"]
2020-03-21 10:50:51,334 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,335 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,337 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,337 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,337 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ..., timesToRetry = 1
2020-03-21 10:50:51,337 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ... context: [action="Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ..." operation="upload"]
2020-03-21 10:50:51,337 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,353 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/460394106db71f9169a0f9c9d0758f0c8b4402f6,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,353 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,353 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,353 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=354 context: [action="Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ..." operation="upload"]
2020-03-21 10:50:51,354 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,354 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ... context: [action="Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ..." operation="upload"]
2020-03-21 10:50:51,354 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,354 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/0993c5317e7c9f0e2c8c0ad5787d61a6c278f373,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,354 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,355 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ..., timesToRetry = 2
2020-03-21 10:50:51,355 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ... context: [action="Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ..." operation="upload"]
2020-03-21 10:50:51,355 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,357 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/2a6ae4960eb04b729b8f55a6d5e91946c56f72b8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,358 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,358 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ..., timesToRetry = 2
2020-03-21 10:50:51,358 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ... context: [action="Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ..." operation="upload"]
2020-03-21 10:50:51,358 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,360 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,360 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,360 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,361 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=70 context: [action="Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ..." operation="upload"]
2020-03-21 10:50:51,361 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,361 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ... context: [action="Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ..." operation="upload"]
2020-03-21 10:50:51,361 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,395 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f8dd84ca49f1f4914d6f5103e333680afd8a999d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(29), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,395 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(29), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,396 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ..., timesToRetry = 2
2020-03-21 10:50:51,396 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ... context: [action="Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ..." operation="upload"]
2020-03-21 10:50:51,396 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,398 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/0993c5317e7c9f0e2c8c0ad5787d61a6c278f373,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(29), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,398 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(29), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,398 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ..., timesToRetry = 1
2020-03-21 10:50:51,398 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/2a6ae4960eb04b729b8f55a6d5e91946c56f72b8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(29), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,398 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ... context: [action="Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ..." operation="upload"]
2020-03-21 10:50:51,398 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,398 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(29), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,398 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ..., timesToRetry = 1
2020-03-21 10:50:51,398 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ... context: [action="Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ..." operation="upload"]
2020-03-21 10:50:51,399 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,402 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/e2319729e4230cfd534916d5de3bd1ed2d0a3cff,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,402 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,402 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ..., timesToRetry = 2
2020-03-21 10:50:51,402 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ... context: [action="Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ..." operation="upload"]
2020-03-21 10:50:51,402 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,418 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f8dd84ca49f1f4914d6f5103e333680afd8a999d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,418 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,418 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ..., timesToRetry = 1
2020-03-21 10:50:51,418 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/0993c5317e7c9f0e2c8c0ad5787d61a6c278f373,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,418 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ... context: [action="Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ..." operation="upload"]
2020-03-21 10:50:51,418 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,418 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,418 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,418 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=84 context: [action="Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ..." operation="upload"]
2020-03-21 10:50:51,419 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,419 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ... context: [action="Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ..." operation="upload"]
2020-03-21 10:50:51,419 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,421 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/2a6ae4960eb04b729b8f55a6d5e91946c56f72b8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,421 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,422 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,422 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=88 context: [action="Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ..." operation="upload"]
2020-03-21 10:50:51,422 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,422 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ... context: [action="Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ..." operation="upload"]
2020-03-21 10:50:51,422 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,425 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/e2319729e4230cfd534916d5de3bd1ed2d0a3cff,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,425 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,426 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ..., timesToRetry = 1
2020-03-21 10:50:51,426 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ... context: [action="Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ..." operation="upload"]
2020-03-21 10:50:51,426 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,439 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f8dd84ca49f1f4914d6f5103e333680afd8a999d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,439 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,439 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,440 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=86 context: [action="Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ..." operation="upload"]
2020-03-21 10:50:51,440 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,440 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ... context: [action="Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ..." operation="upload"]
2020-03-21 10:50:51,440 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,441 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/90244f77ced357932d0f66faba38b1ddb8090946,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,441 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,441 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ..., timesToRetry = 2
2020-03-21 10:50:51,441 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ... context: [action="Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ..." operation="upload"]
2020-03-21 10:50:51,441 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,445 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/e2319729e4230cfd534916d5de3bd1ed2d0a3cff,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,445 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,445 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/9b534405e648ae238cb3d19dbacd6e59e4d5d21c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,445 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,445 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=84 context: [action="Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ..." operation="upload"]
2020-03-21 10:50:51,445 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,445 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ..., timesToRetry = 2
2020-03-21 10:50:51,445 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,445 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ... context: [action="Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ..." operation="upload"]
2020-03-21 10:50:51,445 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ... context: [action="Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ..." operation="upload"]
2020-03-21 10:50:51,445 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,445 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,466 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/7aed9b990334c79f50bb938ab51ad78a7d3e60b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,466 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/40eb236e825d87bb0af3f883e8ec69988a40302f,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,466 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,466 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,466 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/9b534405e648ae238cb3d19dbacd6e59e4d5d21c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,466 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ..., timesToRetry = 2
2020-03-21 10:50:51,466 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ..., timesToRetry = 2
2020-03-21 10:50:51,466 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ... context: [action="Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ..." operation="upload"]
2020-03-21 10:50:51,466 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,467 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ..., timesToRetry = 1
2020-03-21 10:50:51,467 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ... context: [action="Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ..." operation="upload"]
2020-03-21 10:50:51,467 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,467 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ... context: [action="Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ..." operation="upload"]
2020-03-21 10:50:51,467 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,467 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,468 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/90244f77ced357932d0f66faba38b1ddb8090946,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,468 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,469 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ..., timesToRetry = 1
2020-03-21 10:50:51,469 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ... context: [action="Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ..." operation="upload"]
2020-03-21 10:50:51,469 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/40eb236e825d87bb0af3f883e8ec69988a40302f,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/7aed9b990334c79f50bb938ab51ad78a7d3e60b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/9b534405e648ae238cb3d19dbacd6e59e4d5d21c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,507 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/90244f77ced357932d0f66faba38b1ddb8090946,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,507 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ..., timesToRetry = 1
2020-03-21 10:50:51,508 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,508 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,507 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,508 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,508 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=86 context: [action="Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ..." operation="upload"]
2020-03-21 10:50:51,508 EDT  INFO CLIFileSyncClient$$anon$8 - performTransferActions(..) completed 7 out of 10
2020-03-21 10:50:51,507 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,508 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ..., timesToRetry = 1
2020-03-21 10:50:51,508 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,508 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=89 context: [action="Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ..." operation="upload"]
2020-03-21 10:50:51,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ... context: [action="Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ..." operation="upload"]
2020-03-21 10:50:51,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ... context: [action="Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ..." operation="upload"]
2020-03-21 10:50:51,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,508 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ... context: [action="Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ..." operation="upload"]
2020-03-21 10:50:51,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ... context: [action="Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ..." operation="upload"]
2020-03-21 10:50:51,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,751 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/7aed9b990334c79f50bb938ab51ad78a7d3e60b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,751 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1b131952b298820d981c03be5a275f459404b9fa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,751 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/40eb236e825d87bb0af3f883e8ec69988a40302f,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,751 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,751 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,752 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,751 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/29c83a638449549c31f71cb59b99dc738f56dbaa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,751 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,752 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ..., timesToRetry = 2
2020-03-21 10:50:51,752 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ... context: [action="Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ..." operation="upload"]
2020-03-21 10:50:51,752 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,753 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ..., timesToRetry = 2
2020-03-21 10:50:51,753 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ... context: [action="Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ..." operation="upload"]
2020-03-21 10:50:51,752 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=312 context: [action="Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ..." operation="upload"]
2020-03-21 10:50:51,752 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,753 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=308 context: [action="Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ..." operation="upload"]
2020-03-21 10:50:51,753 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,753 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,753 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,753 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ... context: [action="Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ..." operation="upload"]
2020-03-21 10:50:51,754 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,753 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,754 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ... context: [action="Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ..." operation="upload"]
2020-03-21 10:50:51,754 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,776 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d51c763875c62ef3bf422c433e1460b0961887b7,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,776 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1b131952b298820d981c03be5a275f459404b9fa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,776 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d58b62e8226b4e6da977899fb0f0c2c35db34db2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,776 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/29c83a638449549c31f71cb59b99dc738f56dbaa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,776 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,776 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ..., timesToRetry = 2
2020-03-21 10:50:51,776 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,776 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ..., timesToRetry = 1
2020-03-21 10:50:51,776 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ... context: [action="Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ..." operation="upload"]
2020-03-21 10:50:51,776 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,777 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ..., timesToRetry = 1
2020-03-21 10:50:51,776 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,777 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ..., timesToRetry = 2
2020-03-21 10:50:51,777 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ... context: [action="Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ..." operation="upload"]
2020-03-21 10:50:51,777 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ... context: [action="Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ..." operation="upload"]
2020-03-21 10:50:51,777 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,777 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,776 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ... context: [action="Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ..." operation="upload"]
2020-03-21 10:50:51,777 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,777 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,799 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d51c763875c62ef3bf422c433e1460b0961887b7,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,799 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,800 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1b131952b298820d981c03be5a275f459404b9fa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,800 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/29c83a638449549c31f71cb59b99dc738f56dbaa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,800 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ..., timesToRetry = 1
2020-03-21 10:50:51,800 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,800 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,800 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ... context: [action="Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ..." operation="upload"]
2020-03-21 10:50:51,801 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,801 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,801 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d58b62e8226b4e6da977899fb0f0c2c35db34db2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,801 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=293 context: [action="Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ..." operation="upload"]
2020-03-21 10:50:51,801 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,802 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,801 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=293 context: [action="Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ..." operation="upload"]
2020-03-21 10:50:51,802 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ..., timesToRetry = 1
2020-03-21 10:50:51,802 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,802 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,802 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ... context: [action="Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ..." operation="upload"]
2020-03-21 10:50:51,802 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ... context: [action="Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ..." operation="upload"]
2020-03-21 10:50:51,802 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ... context: [action="Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ..." operation="upload"]
2020-03-21 10:50:51,802 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,802 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,802 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,844 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d51c763875c62ef3bf422c433e1460b0961887b7,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,844 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d8588a2720524b57718bcbb180c8ff1060f03923,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,844 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,845 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,845 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=92 context: [action="Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ..." operation="upload"]
2020-03-21 10:50:51,844 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d58b62e8226b4e6da977899fb0f0c2c35db34db2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,845 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,844 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/60df082e41f91220da187fbf63479eb4ab49bb89,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,844 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,845 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,845 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ... context: [action="Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ..." operation="upload"]
2020-03-21 10:50:51,846 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,845 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,846 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ..., timesToRetry = 2
2020-03-21 10:50:51,845 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ..., timesToRetry = 2
2020-03-21 10:50:51,846 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,846 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ... context: [action="Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ..." operation="upload"]
2020-03-21 10:50:51,846 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ... context: [action="Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ..." operation="upload"]
2020-03-21 10:50:51,846 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,846 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=92 context: [action="Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ..." operation="upload"]
2020-03-21 10:50:51,846 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,846 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,846 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ... context: [action="Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ..." operation="upload"]
2020-03-21 10:50:51,846 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,868 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8add7da8b51bf42e660d34ee9bb47a3ad036a577,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,868 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d8588a2720524b57718bcbb180c8ff1060f03923,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,868 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/acf5a636d3d495d4dae04f632d3439bbc8767274,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,868 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,868 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,868 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,869 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ..., timesToRetry = 1
2020-03-21 10:50:51,869 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ... context: [action="Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ..." operation="upload"]
2020-03-21 10:50:51,869 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ..., timesToRetry = 2
2020-03-21 10:50:51,868 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/60df082e41f91220da187fbf63479eb4ab49bb89,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,868 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ..., timesToRetry = 2
2020-03-21 10:50:51,869 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,870 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ..., timesToRetry = 1
2020-03-21 10:50:51,869 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ... context: [action="Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ..." operation="upload"]
2020-03-21 10:50:51,869 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,870 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,870 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ... context: [action="Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ..." operation="upload"]
2020-03-21 10:50:51,869 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ... context: [action="Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ..." operation="upload"]
2020-03-21 10:50:51,870 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,870 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,894 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d8588a2720524b57718bcbb180c8ff1060f03923,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,894 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8add7da8b51bf42e660d34ee9bb47a3ad036a577,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,894 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,895 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,895 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,895 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ..., timesToRetry = 1
2020-03-21 10:50:51,895 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ... context: [action="Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ..." operation="upload"]
2020-03-21 10:50:51,894 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/acf5a636d3d495d4dae04f632d3439bbc8767274,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,895 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,895 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/60df082e41f91220da187fbf63479eb4ab49bb89,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,895 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=93 context: [action="Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ..." operation="upload"]
2020-03-21 10:50:51,895 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,896 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,896 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,896 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,896 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=94 context: [action="Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ..." operation="upload"]
2020-03-21 10:50:51,896 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ... context: [action="Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ..." operation="upload"]
2020-03-21 10:50:51,896 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,896 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ..., timesToRetry = 1
2020-03-21 10:50:51,896 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,897 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ... context: [action="Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ..." operation="upload"]
2020-03-21 10:50:51,896 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ... context: [action="Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ..." operation="upload"]
2020-03-21 10:50:51,897 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,897 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,920 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8add7da8b51bf42e660d34ee9bb47a3ad036a577,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,920 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8e7564d0cffe64cb43e6a1ec50a2e446ea598933,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,920 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/acf5a636d3d495d4dae04f632d3439bbc8767274,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,920 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,921 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/79c5088c3653dfd4ed2ba33c60295d3efc339dfe,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(11), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,921 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,921 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,921 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ..., timesToRetry = 2
2020-03-21 10:50:51,921 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,921 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(11), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,922 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ..., timesToRetry = 2
2020-03-21 10:50:51,921 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,922 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=77 context: [action="Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ..." operation="upload"]
2020-03-21 10:50:51,922 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ... context: [action="Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ..." operation="upload"]
2020-03-21 10:50:51,922 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=76 context: [action="Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ..." operation="upload"]
2020-03-21 10:50:51,922 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,921 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ... context: [action="Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ..." operation="upload"]
2020-03-21 10:50:51,922 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,922 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,922 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,923 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ... context: [action="Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ..." operation="upload"]
2020-03-21 10:50:51,923 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,922 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ... context: [action="Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ..." operation="upload"]
2020-03-21 10:50:51,923 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,947 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/79c5088c3653dfd4ed2ba33c60295d3efc339dfe,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,947 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8e7564d0cffe64cb43e6a1ec50a2e446ea598933,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,947 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/5b3c69d2c980f0882109f69d5fde0bb959ede304,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,947 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,947 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/e97e8b658fc7f00256e6fb26340cf4ac86e3d953,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,947 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,948 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,947 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ..., timesToRetry = 1
2020-03-21 10:50:51,947 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,948 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ... context: [action="Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ..." operation="upload"]
2020-03-21 10:50:51,948 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ..., timesToRetry = 2
2020-03-21 10:50:51,949 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,949 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ... context: [action="Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ..." operation="upload"]
2020-03-21 10:50:51,948 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ..., timesToRetry = 1
2020-03-21 10:50:51,949 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,949 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ..., timesToRetry = 2
2020-03-21 10:50:51,949 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ... context: [action="Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ..." operation="upload"]
2020-03-21 10:50:51,949 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ... context: [action="Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ..." operation="upload"]
2020-03-21 10:50:51,949 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,949 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,969 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8e7564d0cffe64cb43e6a1ec50a2e446ea598933,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,969 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,969 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,969 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=73 context: [action="Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ..." operation="upload"]
2020-03-21 10:50:51,969 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/79c5088c3653dfd4ed2ba33c60295d3efc339dfe,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,969 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,970 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ... context: [action="Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ..." operation="upload"]
2020-03-21 10:50:51,970 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,970 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,970 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,970 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=74 context: [action="Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ..." operation="upload"]
2020-03-21 10:50:51,970 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,970 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ... context: [action="Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ..." operation="upload"]
2020-03-21 10:50:51,970 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/e97e8b658fc7f00256e6fb26340cf4ac86e3d953,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,970 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,970 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,971 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ..., timesToRetry = 1
2020-03-21 10:50:51,971 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ... context: [action="Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ..." operation="upload"]
2020-03-21 10:50:51,971 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,971 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/5b3c69d2c980f0882109f69d5fde0bb959ede304,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,971 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,971 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ..., timesToRetry = 1
2020-03-21 10:50:51,971 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ... context: [action="Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ..." operation="upload"]
2020-03-21 10:50:51,971 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,993 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/5b3c69d2c980f0882109f69d5fde0bb959ede304,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,993 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,994 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,994 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=72 context: [action="Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ..." operation="upload"]
2020-03-21 10:50:51,994 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,994 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ... context: [action="Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ..." operation="upload"]
2020-03-21 10:50:51,994 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,995 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/e97e8b658fc7f00256e6fb26340cf4ac86e3d953,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,995 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,995 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/3963ae96c2c1c718eb11e14ac6e9d354fb37ed31,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,995 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d1741d713cdb039028a3f7584d56469f5a37442a,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:51,995 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,995 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ..., timesToRetry = 2
2020-03-21 10:50:51,995 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,996 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=74 context: [action="Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ..." operation="upload"]
2020-03-21 10:50:51,996 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ... context: [action="Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ..." operation="upload"]
2020-03-21 10:50:51,996 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:51,995 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:51,996 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ... context: [action="Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ..." operation="upload"]
2020-03-21 10:50:51,996 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,996 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:51,996 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ..., timesToRetry = 2
2020-03-21 10:50:51,996 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ... context: [action="Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ..." operation="upload"]
2020-03-21 10:50:51,996 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,017 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/3772e59b32172557c61c7aed6924b9b9d309391c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,017 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,017 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ..., timesToRetry = 2
2020-03-21 10:50:52,017 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ... context: [action="Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ..." operation="upload"]
2020-03-21 10:50:52,017 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,025 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d1741d713cdb039028a3f7584d56469f5a37442a,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,025 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/c197a934195a694a015393a3a82c4145f4d3dce2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,025 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/3963ae96c2c1c718eb11e14ac6e9d354fb37ed31,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,025 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,025 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,025 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ..., timesToRetry = 1
2020-03-21 10:50:52,025 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,025 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ... context: [action="Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ..." operation="upload"]
2020-03-21 10:50:52,026 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ..., timesToRetry = 2
2020-03-21 10:50:52,025 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ..., timesToRetry = 1
2020-03-21 10:50:52,026 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ... context: [action="Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ..." operation="upload"]
2020-03-21 10:50:52,026 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ... context: [action="Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ..." operation="upload"]
2020-03-21 10:50:52,026 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,026 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,026 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,048 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d1741d713cdb039028a3f7584d56469f5a37442a,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,049 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/3772e59b32172557c61c7aed6924b9b9d309391c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,048 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/3963ae96c2c1c718eb11e14ac6e9d354fb37ed31,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,049 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/c197a934195a694a015393a3a82c4145f4d3dce2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,049 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,049 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,049 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,049 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,049 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,049 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ..., timesToRetry = 1
2020-03-21 10:50:52,050 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=80 context: [action="Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ..." operation="upload"]
2020-03-21 10:50:52,050 EDT  INFO CLIFileSyncClient$$anon$8 - performTransferActions(..) completed 8 out of 10
2020-03-21 10:50:52,049 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,050 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,050 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ... context: [action="Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ..." operation="upload"]
2020-03-21 10:50:52,050 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,050 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ..., timesToRetry = 1
2020-03-21 10:50:52,050 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ... context: [action="Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ..." operation="upload"]
2020-03-21 10:50:52,050 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ... context: [action="Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ..." operation="upload"]
2020-03-21 10:50:52,050 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=81 context: [action="Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ..." operation="upload"]
2020-03-21 10:50:52,050 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,050 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,050 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,050 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ... context: [action="Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ..." operation="upload"]
2020-03-21 10:50:52,051 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,311 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/c197a934195a694a015393a3a82c4145f4d3dce2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,311 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,311 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,311 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=315 context: [action="Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ..." operation="upload"]
2020-03-21 10:50:52,311 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,311 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ... context: [action="Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ..." operation="upload"]
2020-03-21 10:50:52,311 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,314 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/89500d9bf6cf5d67b6e51ae4c33435930e2b0860,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,314 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,314 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ..., timesToRetry = 2
2020-03-21 10:50:52,314 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ... context: [action="Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ..." operation="upload"]
2020-03-21 10:50:52,314 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,314 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/3772e59b32172557c61c7aed6924b9b9d309391c,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,314 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,314 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,314 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=320 context: [action="Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ..." operation="upload"]
2020-03-21 10:50:52,314 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,314 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ... context: [action="Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ..." operation="upload"]
2020-03-21 10:50:52,314 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,315 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/01245c67e603f1c878c1016054ba0edc506fda0b,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,315 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,315 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ..., timesToRetry = 2
2020-03-21 10:50:52,315 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ... context: [action="Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ..." operation="upload"]
2020-03-21 10:50:52,315 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,334 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/df520d69a33744eefa12852d74608eb6244218e2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,334 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/89500d9bf6cf5d67b6e51ae4c33435930e2b0860,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,335 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,335 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ..., timesToRetry = 2
2020-03-21 10:50:52,335 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,335 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ... context: [action="Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ..." operation="upload"]
2020-03-21 10:50:52,335 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ..., timesToRetry = 1
2020-03-21 10:50:52,335 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,335 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ... context: [action="Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ..." operation="upload"]
2020-03-21 10:50:52,336 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,337 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/01245c67e603f1c878c1016054ba0edc506fda0b,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,337 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,337 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ..., timesToRetry = 1
2020-03-21 10:50:52,337 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ... context: [action="Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ..." operation="upload"]
2020-03-21 10:50:52,337 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,338 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/9ed56d31d8b6032fd37910209bf50abb6e2295b5,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,338 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,338 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ..., timesToRetry = 2
2020-03-21 10:50:52,338 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ... context: [action="Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ..." operation="upload"]
2020-03-21 10:50:52,339 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,358 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/df520d69a33744eefa12852d74608eb6244218e2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,358 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/01245c67e603f1c878c1016054ba0edc506fda0b,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,358 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,358 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ..., timesToRetry = 1
2020-03-21 10:50:52,358 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/89500d9bf6cf5d67b6e51ae4c33435930e2b0860,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,359 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ... context: [action="Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ..." operation="upload"]
2020-03-21 10:50:52,358 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,359 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,359 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,359 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,359 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=309 context: [action="Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ..." operation="upload"]
2020-03-21 10:50:52,359 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,359 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,359 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=309 context: [action="Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ..." operation="upload"]
2020-03-21 10:50:52,359 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ... context: [action="Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ..." operation="upload"]
2020-03-21 10:50:52,359 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,359 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,359 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ... context: [action="Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ..." operation="upload"]
2020-03-21 10:50:52,359 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,360 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/9ed56d31d8b6032fd37910209bf50abb6e2295b5,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,360 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,360 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ..., timesToRetry = 1
2020-03-21 10:50:52,360 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ... context: [action="Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ..." operation="upload"]
2020-03-21 10:50:52,360 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,382 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/ddc179b734222f52898d9e8010e5c62c83bda3c8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,382 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,382 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/df520d69a33744eefa12852d74608eb6244218e2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,382 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ..., timesToRetry = 2
2020-03-21 10:50:52,382 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1946fe36d3b6f5091b17539265ff6be4565cfe87,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,382 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ... context: [action="Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ..." operation="upload"]
2020-03-21 10:50:52,382 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,382 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,382 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,383 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ..., timesToRetry = 2
2020-03-21 10:50:52,382 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,383 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ... context: [action="Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ..." operation="upload"]
2020-03-21 10:50:52,383 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=72 context: [action="Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ..." operation="upload"]
2020-03-21 10:50:52,383 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,383 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/9ed56d31d8b6032fd37910209bf50abb6e2295b5,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,383 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,383 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ... context: [action="Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ..." operation="upload"]
2020-03-21 10:50:52,383 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,383 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,383 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,383 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=69 context: [action="Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ..." operation="upload"]
2020-03-21 10:50:52,383 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,383 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ... context: [action="Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ..." operation="upload"]
2020-03-21 10:50:52,383 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,404 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/ddc179b734222f52898d9e8010e5c62c83bda3c8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,404 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,405 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ..., timesToRetry = 1
2020-03-21 10:50:52,405 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1946fe36d3b6f5091b17539265ff6be4565cfe87,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,405 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ... context: [action="Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ..." operation="upload"]
2020-03-21 10:50:52,405 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,405 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,405 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ..., timesToRetry = 1
2020-03-21 10:50:52,405 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ... context: [action="Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ..." operation="upload"]
2020-03-21 10:50:52,405 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,406 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/6dc6193654b533e00ccdbb345f3c27ad7ed98890,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,406 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,406 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ..., timesToRetry = 2
2020-03-21 10:50:52,406 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ... context: [action="Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ..." operation="upload"]
2020-03-21 10:50:52,407 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/44226cf7931d4c23968261073bc29c1ac53c61aa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,407 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,407 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,407 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ..., timesToRetry = 2
2020-03-21 10:50:52,407 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ... context: [action="Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ..." operation="upload"]
2020-03-21 10:50:52,407 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,425 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/ddc179b734222f52898d9e8010e5c62c83bda3c8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,425 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1946fe36d3b6f5091b17539265ff6be4565cfe87,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,425 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,425 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,425 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,425 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,425 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=66 context: [action="Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ..." operation="upload"]
2020-03-21 10:50:52,425 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=66 context: [action="Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ..." operation="upload"]
2020-03-21 10:50:52,426 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,426 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,426 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ... context: [action="Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ..." operation="upload"]
2020-03-21 10:50:52,426 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ... context: [action="Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ..." operation="upload"]
2020-03-21 10:50:52,426 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,426 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,428 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/6dc6193654b533e00ccdbb345f3c27ad7ed98890,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,428 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,428 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ..., timesToRetry = 1
2020-03-21 10:50:52,428 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ... context: [action="Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ..." operation="upload"]
2020-03-21 10:50:52,428 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,429 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/44226cf7931d4c23968261073bc29c1ac53c61aa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,429 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,429 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ..., timesToRetry = 1
2020-03-21 10:50:52,429 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ... context: [action="Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ..." operation="upload"]
2020-03-21 10:50:52,429 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,448 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/6dc6193654b533e00ccdbb345f3c27ad7ed98890,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,449 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,449 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,449 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=66 context: [action="Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ..." operation="upload"]
2020-03-21 10:50:52,449 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,449 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ... context: [action="Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ..." operation="upload"]
2020-03-21 10:50:52,449 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,450 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/cacc77858cd817779979dc760f720883c06d824d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,450 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,450 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ..., timesToRetry = 2
2020-03-21 10:50:52,450 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,450 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ... context: [action="Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ..." operation="upload"]
2020-03-21 10:50:52,450 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,450 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,450 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ..., timesToRetry = 2
2020-03-21 10:50:52,450 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ... context: [action="Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ..." operation="upload"]
2020-03-21 10:50:52,450 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,452 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/44226cf7931d4c23968261073bc29c1ac53c61aa,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,452 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,453 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,453 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=70 context: [action="Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ..." operation="upload"]
2020-03-21 10:50:52,453 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,453 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ... context: [action="Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ..." operation="upload"]
2020-03-21 10:50:52,453 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,469 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/cacc77858cd817779979dc760f720883c06d824d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,469 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,469 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,469 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ..., timesToRetry = 1
2020-03-21 10:50:52,469 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,469 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ... context: [action="Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ..." operation="upload"]
2020-03-21 10:50:52,469 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ..., timesToRetry = 1
2020-03-21 10:50:52,469 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,469 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a265168fa6c2de1787dd5692d4f10e34ab0a0098,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,469 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ... context: [action="Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ..." operation="upload"]
2020-03-21 10:50:52,470 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,470 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,470 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ..., timesToRetry = 2
2020-03-21 10:50:52,470 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ... context: [action="Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ..." operation="upload"]
2020-03-21 10:50:52,470 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,472 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/27f765516b092c48e4df2a7994fd36d09c9569af,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,472 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,473 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ..., timesToRetry = 2
2020-03-21 10:50:52,473 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ... context: [action="Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ..." operation="upload"]
2020-03-21 10:50:52,473 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,506 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/cacc77858cd817779979dc760f720883c06d824d,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,506 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,507 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,507 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=81 context: [action="Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ..." operation="upload"]
2020-03-21 10:50:52,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a265168fa6c2de1787dd5692d4f10e34ab0a0098,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,507 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/27f765516b092c48e4df2a7994fd36d09c9569af,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,507 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,508 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,508 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,508 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ..., timesToRetry = 1
2020-03-21 10:50:52,508 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,508 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ..., timesToRetry = 1
2020-03-21 10:50:52,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ... context: [action="Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ..." operation="upload"]
2020-03-21 10:50:52,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,508 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=82 context: [action="Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ..." operation="upload"]
2020-03-21 10:50:52,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ... context: [action="Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ..." operation="upload"]
2020-03-21 10:50:52,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,508 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ... context: [action="Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ..." operation="upload"]
2020-03-21 10:50:52,508 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,508 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ... context: [action="Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ..." operation="upload"]
2020-03-21 10:50:52,508 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,530 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/a265168fa6c2de1787dd5692d4f10e34ab0a0098,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,530 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1b4afecd8188015a76e7503375cb06bfc29802ba,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,530 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,530 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,530 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=81 context: [action="Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ..." operation="upload"]
2020-03-21 10:50:52,530 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,530 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,530 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ..., timesToRetry = 2
2020-03-21 10:50:52,531 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ... context: [action="Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ..." operation="upload"]
2020-03-21 10:50:52,531 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ... context: [action="Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ..." operation="upload"]
2020-03-21 10:50:52,531 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f5970f70ced82ba84f4a0b96792fbf036817d64a,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,531 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/27f765516b092c48e4df2a7994fd36d09c9569af,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,531 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,531 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ..., timesToRetry = 2
2020-03-21 10:50:52,531 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,531 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ... context: [action="Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ..." operation="upload"]
2020-03-21 10:50:52,531 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,531 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,531 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,531 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,531 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=78 context: [action="Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ..." operation="upload"]
2020-03-21 10:50:52,531 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,531 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ... context: [action="Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ..." operation="upload"]
2020-03-21 10:50:52,531 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,552 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1b4afecd8188015a76e7503375cb06bfc29802ba,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,553 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,553 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ..., timesToRetry = 1
2020-03-21 10:50:52,553 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ... context: [action="Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ..." operation="upload"]
2020-03-21 10:50:52,553 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,553 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f5970f70ced82ba84f4a0b96792fbf036817d64a,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,553 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,553 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ..., timesToRetry = 1
2020-03-21 10:50:52,553 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/18e7085dc663d6f0c91df02e3a87dea8c5657ea2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,553 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ... context: [action="Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ..." operation="upload"]
2020-03-21 10:50:52,553 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/09b0bd4fa6d7bb3f42cf3011e60e2aa307269337,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,553 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,554 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ..., timesToRetry = 2
2020-03-21 10:50:52,553 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,554 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ... context: [action="Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ..." operation="upload"]
2020-03-21 10:50:52,554 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,554 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ..., timesToRetry = 2
2020-03-21 10:50:52,554 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,554 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ... context: [action="Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ..." operation="upload"]
2020-03-21 10:50:52,554 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,572 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/18e7085dc663d6f0c91df02e3a87dea8c5657ea2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,572 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,572 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ..., timesToRetry = 1
2020-03-21 10:50:52,572 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ... context: [action="Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ..." operation="upload"]
2020-03-21 10:50:52,572 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,798 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/f5970f70ced82ba84f4a0b96792fbf036817d64a,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,798 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/09b0bd4fa6d7bb3f42cf3011e60e2aa307269337,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,798 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/1b4afecd8188015a76e7503375cb06bfc29802ba,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,798 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,798 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,798 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,798 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,799 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ..., timesToRetry = 1
2020-03-21 10:50:52,799 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ... context: [action="Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ..." operation="upload"]
2020-03-21 10:50:52,799 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,800 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=292 context: [action="Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ..." operation="upload"]
2020-03-21 10:50:52,800 EDT  INFO CLIFileSyncClient$$anon$8 - performTransferActions(..) completed 9 out of 10
2020-03-21 10:50:52,799 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=290 context: [action="Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ..." operation="upload"]
2020-03-21 10:50:52,800 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,799 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,800 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ... context: [action="Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ..." operation="upload"]
2020-03-21 10:50:52,800 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,800 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,800 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ... context: [action="Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ..." operation="upload"]
2020-03-21 10:50:52,800 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,819 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/18e7085dc663d6f0c91df02e3a87dea8c5657ea2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,819 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,819 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,819 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=288 context: [action="Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ..." operation="upload"]
2020-03-21 10:50:52,819 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,819 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ... context: [action="Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ..." operation="upload"]
2020-03-21 10:50:52,820 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,821 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,822 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,822 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/09b0bd4fa6d7bb3f42cf3011e60e2aa307269337,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,822 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ..., timesToRetry = 2
2020-03-21 10:50:52,822 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,822 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,822 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ... context: [action="Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ..." operation="upload"]
2020-03-21 10:50:52,822 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=291 context: [action="Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ..." operation="upload"]
2020-03-21 10:50:52,822 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,822 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,822 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ... context: [action="Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ..." operation="upload"]
2020-03-21 10:50:52,822 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,824 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b602f7435bda121bc57ad9adddd43143ac8188f9,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,824 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,824 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ..., timesToRetry = 2
2020-03-21 10:50:52,824 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ... context: [action="Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ..." operation="upload"]
2020-03-21 10:50:52,824 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,844 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8030f661f22c3431325398786233d54e8e68dcd7,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,844 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,844 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ..., timesToRetry = 2
2020-03-21 10:50:52,844 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ... context: [action="Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ..." operation="upload"]
2020-03-21 10:50:52,844 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,846 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8589b9c97271e05da0f29134b07f6062159f24b5,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,847 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,847 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,847 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ..., timesToRetry = 2
2020-03-21 10:50:52,847 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,847 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ... context: [action="Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ..." operation="upload"]
2020-03-21 10:50:52,847 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ..., timesToRetry = 1
2020-03-21 10:50:52,847 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,847 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ... context: [action="Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ..." operation="upload"]
2020-03-21 10:50:52,847 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,848 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b602f7435bda121bc57ad9adddd43143ac8188f9,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,848 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,848 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ..., timesToRetry = 1
2020-03-21 10:50:52,848 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ... context: [action="Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ..." operation="upload"]
2020-03-21 10:50:52,848 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,866 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8030f661f22c3431325398786233d54e8e68dcd7,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,866 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,867 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ..., timesToRetry = 1
2020-03-21 10:50:52,867 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ... context: [action="Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ..." operation="upload"]
2020-03-21 10:50:52,867 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,873 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8589b9c97271e05da0f29134b07f6062159f24b5,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,873 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,873 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ..., timesToRetry = 1
2020-03-21 10:50:52,873 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ... context: [action="Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ..." operation="upload"]
2020-03-21 10:50:52,873 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,874 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,874 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,874 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,874 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=74 context: [action="Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ..." operation="upload"]
2020-03-21 10:50:52,874 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b602f7435bda121bc57ad9adddd43143ac8188f9,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,874 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,874 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,874 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,875 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=75 context: [action="Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ..." operation="upload"]
2020-03-21 10:50:52,874 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ... context: [action="Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ..." operation="upload"]
2020-03-21 10:50:52,875 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,875 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,875 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ... context: [action="Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ..." operation="upload"]
2020-03-21 10:50:52,875 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,891 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8030f661f22c3431325398786233d54e8e68dcd7,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,891 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,891 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,891 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=72 context: [action="Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ..." operation="upload"]
2020-03-21 10:50:52,892 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,892 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ... context: [action="Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ..." operation="upload"]
2020-03-21 10:50:52,892 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,892 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/8589b9c97271e05da0f29134b07f6062159f24b5,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,892 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,892 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,892 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=70 context: [action="Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ..." operation="upload"]
2020-03-21 10:50:52,892 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,892 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ... context: [action="Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ..." operation="upload"]
2020-03-21 10:50:52,892 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,897 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/12f9d14247e78df5a2afea27d5e86e2529a63f33,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,897 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,897 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ..., timesToRetry = 2
2020-03-21 10:50:52,897 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ... context: [action="Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ..." operation="upload"]
2020-03-21 10:50:52,897 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,898 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4404eaf5e2f5c891dcad07f6ee2318840d72c4b8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,898 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,898 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ..., timesToRetry = 2
2020-03-21 10:50:52,898 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ... context: [action="Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ..." operation="upload"]
2020-03-21 10:50:52,898 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,912 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/62b361d8617bef7595fa9ff344ea30de1cd29bcb,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,913 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,913 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ..., timesToRetry = 2
2020-03-21 10:50:52,913 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ... context: [action="Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ..." operation="upload"]
2020-03-21 10:50:52,913 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,914 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/bfb1765aca244a46dceb74360ac0b95575dbe2b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,914 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,914 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ..., timesToRetry = 2
2020-03-21 10:50:52,914 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ... context: [action="Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ..." operation="upload"]
2020-03-21 10:50:52,914 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,917 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4404eaf5e2f5c891dcad07f6ee2318840d72c4b8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,918 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/12f9d14247e78df5a2afea27d5e86e2529a63f33,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,918 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,918 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ..., timesToRetry = 1
2020-03-21 10:50:52,918 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,918 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ... context: [action="Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ..." operation="upload"]
2020-03-21 10:50:52,918 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,918 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ..., timesToRetry = 1
2020-03-21 10:50:52,918 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ... context: [action="Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ..." operation="upload"]
2020-03-21 10:50:52,918 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,942 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/62b361d8617bef7595fa9ff344ea30de1cd29bcb,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,942 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,942 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ..., timesToRetry = 1
2020-03-21 10:50:52,942 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ... context: [action="Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ..." operation="upload"]
2020-03-21 10:50:52,942 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,957 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/bfb1765aca244a46dceb74360ac0b95575dbe2b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,957 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,957 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ..., timesToRetry = 1
2020-03-21 10:50:52,957 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/12f9d14247e78df5a2afea27d5e86e2529a63f33,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,957 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4404eaf5e2f5c891dcad07f6ee2318840d72c4b8,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,957 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ... context: [action="Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ..." operation="upload"]
2020-03-21 10:50:52,957 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,957 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,957 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,958 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,958 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,958 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=83 context: [action="Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ..." operation="upload"]
2020-03-21 10:50:52,958 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=84 context: [action="Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ..." operation="upload"]
2020-03-21 10:50:52,958 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,958 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,958 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ... context: [action="Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ..." operation="upload"]
2020-03-21 10:50:52,958 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ... context: [action="Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ..." operation="upload"]
2020-03-21 10:50:52,958 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,958 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,979 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/62b361d8617bef7595fa9ff344ea30de1cd29bcb,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,979 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,979 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,980 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=88 context: [action="Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ..." operation="upload"]
2020-03-21 10:50:52,980 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,980 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ... context: [action="Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ..." operation="upload"]
2020-03-21 10:50:52,980 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,983 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/bfb1765aca244a46dceb74360ac0b95575dbe2b0,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,983 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/bdc942413aef3182c60408379d5646eb5f5a41dd,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,983 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b7de84769a32dd862a557f958276952d1c3261b3,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:52,983 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,984 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,983 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,984 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ..., timesToRetry = 2
2020-03-21 10:50:52,983 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:52,984 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ... context: [action="Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ..." operation="upload"]
2020-03-21 10:50:52,984 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,984 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=92 context: [action="Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ..." operation="upload"]
2020-03-21 10:50:52,984 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ..., timesToRetry = 2
2020-03-21 10:50:52,984 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ... context: [action="Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ..." operation="upload"]
2020-03-21 10:50:52,984 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:52,984 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:52,984 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ... context: [action="Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ..." operation="upload"]
2020-03-21 10:50:52,984 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,001 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d565687450f8351d960bd65881ef97a32e008190,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,001 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,001 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ..., timesToRetry = 2
2020-03-21 10:50:53,001 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ... context: [action="Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ..." operation="upload"]
2020-03-21 10:50:53,001 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,005 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b7de84769a32dd862a557f958276952d1c3261b3,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,005 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/bdc942413aef3182c60408379d5646eb5f5a41dd,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,005 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,005 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ..., timesToRetry = 1
2020-03-21 10:50:53,005 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,006 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ..., timesToRetry = 1
2020-03-21 10:50:53,005 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ... context: [action="Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ..." operation="upload"]
2020-03-21 10:50:53,006 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ... context: [action="Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ..." operation="upload"]
2020-03-21 10:50:53,006 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,006 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,007 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4f0ff08ebd6634c02ea55b8fdc123a9500bac703,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,007 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,007 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ..., timesToRetry = 2
2020-03-21 10:50:53,007 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ... context: [action="Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ..." operation="upload"]
2020-03-21 10:50:53,007 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,023 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d565687450f8351d960bd65881ef97a32e008190,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,023 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,023 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ..., timesToRetry = 1
2020-03-21 10:50:53,023 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ... context: [action="Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ..." operation="upload"]
2020-03-21 10:50:53,023 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,026 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b7de84769a32dd862a557f958276952d1c3261b3,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,027 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,027 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,027 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=69 context: [action="Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ..." operation="upload"]
2020-03-21 10:50:53,027 EDT DEBUG CLIFileSyncClient$$anon$8 - Transferring blob
2020-03-21 10:50:53,027 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=2 action=Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ... context: [action="Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ..." operation="upload"]
2020-03-21 10:50:53,027 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,030 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/bdc942413aef3182c60408379d5646eb5f5a41dd,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,031 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,031 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,031 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=73 context: [action="Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ..." operation="upload"]
2020-03-21 10:50:53,034 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4f0ff08ebd6634c02ea55b8fdc123a9500bac703,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,034 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,034 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ..., timesToRetry = 1
2020-03-21 10:50:53,034 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ... context: [action="Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ..." operation="upload"]
2020-03-21 10:50:53,034 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,051 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/d565687450f8351d960bd65881ef97a32e008190,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,051 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,052 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,052 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=72 context: [action="Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ..." operation="upload"]
2020-03-21 10:50:53,052 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,053 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,053 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ..., timesToRetry = 2
2020-03-21 10:50:53,053 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=1 action=Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ... context: [action="Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ..." operation="upload"]
2020-03-21 10:50:53,053 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,056 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/4f0ff08ebd6634c02ea55b8fdc123a9500bac703,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,056 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,057 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,057 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=73 context: [action="Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ..." operation="upload"]
2020-03-21 10:50:53,074 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,074 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,075 EDT  WARN CLIFileSyncClient$$anon$8 - Retrying blob download/upload of Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ..., timesToRetry = 1
2020-03-21 10:50:53,075 EDT TRACE CLIFileSyncClient$$anon$8 - Attempting blob transfer, timesToRetry=0 action=Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ... context: [action="Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ..." operation="upload"]
2020-03-21 10:50:53,075 EDT DEBUG OAuthBasedClient$$anon$1 - Checking for existence of blob over HTTP
2020-03-21 10:50:53,323 EDT DEBUG ApacheHttpClientRequest - Got an error: request = ApacheHttpClientRequest(https://opendatasciencelab.jnj.com/v1/blobs/hasKey/b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b,GET,Map(),Map(User-Agent -> domino-cli/4.1.8, Authorization -> Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJWMVJ2QnFkdHFXUC01YzVJYU9KaEtSYnBSdnM4TnhUeEp4WUJYYTFleFJVIn0.eyJqdGkiOiIxNWM4NTE1My0zYThmLTQ3ODQtOGJlNC04N2M4OGU4ZGM2MTQiLCJleHAiOjE1ODQ4MDIyNTAsIm5iZiI6MCwiaWF0IjoxNTg0ODAxOTUwLCJpc3MiOiJodHRwczovL29wZW5kYXRhc2NpZW5jZWxhYi5qbmouY29tL2F1dGgvcmVhbG1zL0RvbWlub1JlYWxtIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjZiODc2MjM2LTEzNmMtNGY2Yi1hNjliLTExMDRhMmZiZGFmMCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRvbWluby1wbGF5IiwiYXV0aF90aW1lIjoxNTg0MzU4OTU1LCJzZXNzaW9uX3N0YXRlIjoiZTNmYzZmZDgtYjhiYi00Y2U5LThkMjMtNDg5ZDFhZTllMzIxIiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiRW1tYSBSaWNoYXJkIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXJpY2hhMTkiLCJnaXZlbl9uYW1lIjoiRW1tYSIsImZhbWlseV9uYW1lIjoiUmljaGFyZCIsImVtYWlsIjoiZXJpY2hhMTlAaXRzLmpuai5jb20ifQ.bntS9na-4ZxFshpJPkLShdLZlyjuj4K6lU8KcW-vMY7q0ThRSQKi4geFy7vpQ17AYwNNlmUtaJgkAU4xA-XFluHGGxF3w3PxWS48fyDo7HlbAGx17MLVrO-aRDgEd_HEueDGGEUuMyz7_XMq_jk4NCTpfC1sM0_hT6zhYi2Pd52JcJoiZtxWeDcy05htE4112iHV3Qm-wxNuyhtLwIYkWvE5HoNhJkPSA4IcNKTGzpswz3PuquQog7_bg5vNuKfCtUO3kOd6VQ1ISyQrMlY8idLDno5Z1rN974Xj_dv6izOdji7zaiCiu96WkNIqDjleUC-6ojVxXgjww639C63L1A),1 minute,1 minute,true,EmptyBody,domino.common.util.http.HttpService@1955b00), response: status = 401, statusText = Unauthorized, headers = X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly), body = 
2020-03-21 10:50:53,323 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,323 EDT ERROR CLIFileSyncClient$$anon$8 - Error downloading/uploading Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ...
domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-03-21 10:50:53,323 EDT  WARN CLIFileSyncClient$$anon$8 - Blob transfer failed, message=Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body:  durationInMs=296 context: [action="Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ..." operation="upload"]
2020-03-21 10:50:53,323 EDT  INFO CLIFileSyncClient$$anon$8 - performTransferActions(..) completed 10 out of 10
2020-03-21 10:50:53,357 EDT  WARN CLIFileSyncClient$$anon$1 - Error uploading to server.
java.lang.IllegalStateException: Blob transfer (upload) failed because 82 operations failed: Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs d76232fc3b76c1b0435feccc77cb795df31e768c, 1919dff10d40440ad1f04f10efdd9db4b0983d63, e54baf380842485c855909b0f29a3b2b8bd33812, 462e25245cbbe3cab18c16a5659a586584b3fec8, 968adbd15d321a6f43a555953ce4293ff896c80a, 6286d15bb40b1f22e83b78591b178693b4911799, d52e217196c771d8df333700ab8696fb478187e7, 12742ac427bcb3241303e668349ee0f28392da82, 8c23c79635c1f197c470c8be1d257efe2f76abdf, 1d08a247896b7e32c5055291dde20b92ff90baac, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>45CE9AB4CEC3B2CE</RequestId><HostId>7IqCz89hf78f9D73evoSVIYe49yI+JjNIXcF6u+fzzQd6o6xmfbkz/bfkdPswIOfUbE2SZSLT/E=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ... -> domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
,Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Upload 4 blobs 74c075736020b11d454a9c350272d82ca8152f95, 3a03b16cd8e110d2beb872182c6df0b1ec488d5a, ef3dae5b8daee9224b243574e56824363ea24bf9, da39a3ee5e6b4b0d3255bfef95601890afd80709 -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>5B7CDC4DFC44E98D</RequestId><HostId>rqO819kkCs6cFAyf984e8BnVCMEOzBYzotf7oO4a/UTjXPaMiDQtNb8Bza285ocAHHfuxyO+fn8=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs d18eee065643dcf2ca4c6b12974580a58e69fc94, 47ea8a2041b1a5afcf3ad5dda55680764e78a6e1, 00168b45324d9308e87eb395cc8b3f34eee3817a, 717daf5dc132ac867302d215e49ba569980fcf2a, b981201865aec0664bcd5eeeb6832185d2b7b61e, 1986cc2bdab7e806cbd9db97238cf8ad8399ce8d, 0851d7c3d8c3998aa9b1467f2be8f7b0d6e05402, 769c081396d646808801644671d1ac889ac2a469, 07a4a6bebd1ed5bab741817291457553b2812d15, dd898f1940b9aca7414a9cabda62f952fefaf8b8, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>392720947984FBCA</RequestId><HostId>/u2JEIot/JWooVYcqHP91HBE4LxdwfE+45Ig+lp1hrcw1f24H2ZYbKbc8zrNlxPJnUt8AISGH8M=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ... -> domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
,Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs 4a1df2a70a20f290d704b8e193fc63dafb69720f, 318d074e411f8f2f1b6fa257252a88dc2c67fc2a, 87d95af488e78bd7157624309cf30a3a8db4a671, e938b309c7f94f4599ded0d6d30f63733a3aaeae, 3185d5b7aa6971fa49d0d14b668ae6b932c5df20, e7258ae614e58dcd25cef584969bce4ea4421bac, 52dfe4032c6d930d0462531f59e61b8a9cbe4f0c, 6bbb293e3074721aec4f457f46b59d0da7f9e237, 4d133372b10810d61356d14f3cbd489324414cf1, 5fcc3a566a11576373ba69fbe0f4039955cbb920, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>094D97B9C5F14509</RequestId><HostId>YFSVw0Dr1wuZp2+S/KeopdvW56q66BH5+fjdFFaFtSLa2HckhUVY6qyitfX1G1QalAxtd63O2e0=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 77 blobs a54d4a9e59d40d902001362c9b43594d21de1673, d6685c283b058a1f3e4dc5eb9a75ddd754d285da, ccb04895f38108198836e26746604b661e1567eb, c991c6220afe902fdd584a4fb278434cde149dc8, e7b2c1f951ed4e6a786ee76a4dc67db64119a63e, afc6705daf11118f989f7f3c63945237dcbbd1d5, 5de875a5761c1ea782c2f93fcfdc7ee4bf0ee1ac, 8cef0f3728cac01870af88639840e05b83b6c972, 51c3bb5a595d6263662bbe52b7cdfeba54fe4193, b68913e2285da19e6ca0c0b544a32d70207407ba, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>8842A2C8629A1BED</RequestId><HostId>GJeg8VhcE+xPl3PHpo2iE0MgTdr0igCDnQ0e8eftX09cmrKEfKGgql1AvdNqP+Cam+fQXSGm8Dk=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ... -> domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
,Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 75 blobs 6d802c9e77d84c1ff02ccc7085b80ebda046e53f, 26199374c154e0caf29341dc48549b370f87ca45, 0ca6976fe19e593dc4390b48eccff94dc64c4273, b3aa8d28161530cee8b1cb67979e8959c4ce032e, 5b97a82f149c10ea58922aa3a0bdce8bacd504cd, 66ab39a46e71bea494a5c827fa1c8a071cd1349a, 54a3e840dd621db066126cc13c2ffb50aeefb706, f9b48cabe511940bd164ec188cfef0b6653704f6, b4a73e599ce7b6a580c7beac84dd7b457aae2bdc, ac9e3d4e6a58082444a6567ec14b492ba1741da9, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>562ED8187C7B4184</RequestId><HostId>D2p/yx19wszl3por4Z93oY26rVKjxHzV5z+QHASb4r/C8OV30s42SwUpvbakr9mqTxIg8E/KURI=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.transferBlobs(MultiThreadedBlobStoreSynchronizer.scala:143)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.uploadBlobs(MultiThreadedBlobStoreSynchronizer.scala:72)
	at domino.common.sync.BlobUploader.uploadBlobs(BlobUploader.scala:26)
	at domino.common.sync.BlobUploader.uploadBlobsReferencedInChanges(BlobUploader.scala:20)
	at domino.common.sync.FileSyncClient.$anonfun$uploadLockedFiles$7(FileSyncClient.scala:77)
	at domino.common.sync.FileSyncClient.$anonfun$uploadLockedFiles$7$adapted(FileSyncClient.scala:77)
	at domino.common.sync.FileStructureRepoSynchronizer.push(FileStructureRepoSynchronizer.scala:116)
	at domino.common.sync.FileSyncClient.uploadLockedFiles(FileSyncClient.scala:77)
	at domino.common.sync.FileSyncClient.$anonfun$uploadLocalToServer$2(FileSyncClient.scala:45)
	at domino.common.sync.LocalFileDirectory.getLockedFileStructure(LocalFileDirectory.scala:38)
	at domino.common.sync.LocalFileDirectory.withTrackedFilesLocked(LocalFileDirectory.scala:55)
	at domino.common.sync.FileSyncClient.uploadLocalToServer(FileSyncClient.scala:44)
	at domino.client.command.UploadCommand.$anonfun$tryUpload$1(UploadCommand.scala:33)
	at domino.client.util.JetSetHelpers$.handleConnectivityDisruptions(JetSetHelpers.scala:14)
	at domino.client.command.UploadCommand.tryUpload(UploadCommand.scala:33)
	at domino.client.command.SyncCommand.doSync(SyncCommand.scala:22)
	at domino.client.command.SyncCommand.sync(SyncCommand.scala:13)
	at domino.client.Domino.executeCommand(Domino.scala:206)
	at domino.client.Domino$.main(Domino.scala:41)
	at domino.client.Domino.main(Domino.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.exe4j.runtime.LauncherEngine.launch(Unknown Source)
	at com.install4j.runtime.launcher.Launcher.main(Unknown Source)
2020-03-21 10:50:53,360 EDT ERROR Domino - Error while processing sync, Java version: 1.8.0_241
java.lang.IllegalStateException: Blob transfer (upload) failed because 82 operations failed: Check and upload 80 blobs d49852aec4d5e26bd18015a47229ecedff8c7871, d654c6ac5da8a0e9208e269656c7e36ccaca2104, f0ccb8f98ece86568209b759d255dca7f385573b, 5b2b95fb0ad3c6d54176b306fb7df1086ac99648, beaa764cf73b982e87eb6e1181eabb4746011aaf, 7ee7f067caa6a10b41df84fe231561453f9a8146, cacc77858cd817779979dc760f720883c06d824d, d82d662f3297d12bbda4e37ac9487fbcd52affe7, cbf52cf8018d9a4a5369618d6cc6a51eaad9e806, d5f77e7c56004aac541cc2095759ac420413e719, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs d5bb747225031236d3e24d2a78a87e54ebe9b7e8, 7beb863c5bc9a03190c97084c233e65c56775ef2, 76f679e5e75bfbbb8afb7c4e9b4f4a0d8d154dcb, c485f0ddb9109a08b96bd78593421358c388abf6, 70ca4dd49a12b7689fc4dd9deb115edf06be3806, 138df5bbce2c8b011d57b55fefcb7f4998ba7032, 472153c52496c3e17e72ae93f2ee41799341b8cb, 986632ca74d614c5080dff3bd424224ab72707de, 2c73889278a80169731927ebae2c506ee53569d2, bf9bae6caf95379cf14eb8d0cf5bb462f8b11e92, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs ed02dcf932acfff3ed723f26e139491b90804c23, 5db05cbf360f973505df7df1537cc9df54691539, e0db9bb07a353a6e3be14b983ff101775440b189, 1ffdfdf77fb9a6f5c936b472e18997f0fb020ba6, ad286966688847d33c56f3b5fc97a5387dbe03a8, 484f13780ed95d3361ad2ff7a1fb22fb9e3e4b18, 4317b26d26cca157eefd9a0f0e3dcda0e1e14556, 6395f0ea5a4bcfd26bfa50435cd574b6de5bb7af, e4c531ecd6b632e8f70e534474739cea9a0388ba, 22088f84989fa3419d9e08d7632c0b295da2362b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs 801e8a2cd0aad5a03034ec12fc1155d8d155a648, 9d7f8edc5f238fcad2b9d72f2e5368980828e699, 79c5088c3653dfd4ed2ba33c60295d3efc339dfe, 5a3654d8b68d976dae5ef1a86583fb5e265eafdc, 852851131972aa619b88626f3f6be58db580ceb8, 8ea84b1e7936528004fcb5be28839ab469a44411, 1741c7c8fd27df72e7273a462f5d98028705aa91, 6ce7f943c8da4abcdc90bc13128fd270c2e969e8, 303ba9d6f48cd07de9a4d04adbc2e26c4e814a1a, 1fc0d4b8304af758bc461931170b838f4959c9a8, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 84 blobs 990d2b04426ea89724125c7a3bc8f1cfaf67d08c, 468b525bcb7bddfeeace531a97efac70cd8b5507, eb233f1f48ac313cd3e64f461da75406aa78e91c, a1dc2e8ad247f71cf25979ff5d417d70ef660058, 181ab6655608f17235332779ddc8b40687860cae, 81acef616121fe8cb049d789b6379023dbe2eef3, e83780937b1097a7afc6bf539a78b25c8df16573, 758d72a1e340a83c1898a03b88561048907726b0, 787ca7e9878ca9974077291ca5466e3caddc48d5, 5cc7d3ad5d11f5614a15bb59d5ec4ba9569ae1f3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 83 blobs ab652eb529bedfcdbe4a1ae7949eed6f9b1dec79, 906a6d6fa77f285c20f09beaaa8549006b062f5a, e96085ef93262aedb28a5e1b4a8e47b7f5879c2d, c224b54ba80821764cff3b7e085cfbd76fb17693, 4d7d80aba017d6913fcbffbae81cd372625a626a, 8a5ed7318ed91dd1e5b2b04c40e19daacd5ca803, 29c83a638449549c31f71cb59b99dc738f56dbaa, 04696bca7c14e0e99e5c50bede122fa127975555, 2fa80a80921aec740afc4fc727745f05b9ca5996, fc1063f0edebd4d42bc8b110eee428dad9924be2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs f4db7542c950215a820394656eef7546626d3af3, 838011de8cf7f0f3a8eeb5956135719d189eece3, 882d2a8f119aa563c74efbe30192304361181653, 7fc9f75e6048deb6129957f5f249eefff3cdb708, 55f6072a2c9a87372ef104cfa213832d040675bd, 2978cbebb8466724d8a68358d279d02dc0e71c7a, 6b8501c42e0fea1545bf91de7d94d2f907b78fef, ef7949cbb109d78fdeda7f1358e2bb3c9cd5011c, f5970f70ced82ba84f4a0b96792fbf036817d64a, 8e0172d53ff4631a37ce594cd5a74be3517e44b0, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 86 blobs 7ed5082c89f6dc656d851763d29581bb58fc99b1, a79f99e912e4ec3cba390bb255a00bbc43e8f766, 8273651085353f727ac31cdae0bca90a3151169f, e2276c6065aede2119c03921e499eb9e19edd16a, 00bdcba1193e503662c1d990ffbe7d47b14aea95, 4458bb8ad7ad270314767990bf4cac009d512696, 56d69dcf3168a2f422c525f5bf032bc3351f38ce, 8490d7a64831c63c271605144a07a9a306bafc2c, 2a6ae4960eb04b729b8f55a6d5e91946c56f72b8, a0046f4b10fe7e9f2e197d0e16c975888da71d44, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs d76232fc3b76c1b0435feccc77cb795df31e768c, 1919dff10d40440ad1f04f10efdd9db4b0983d63, e54baf380842485c855909b0f29a3b2b8bd33812, 462e25245cbbe3cab18c16a5659a586584b3fec8, 968adbd15d321a6f43a555953ce4293ff896c80a, 6286d15bb40b1f22e83b78591b178693b4911799, d52e217196c771d8df333700ab8696fb478187e7, 12742ac427bcb3241303e668349ee0f28392da82, 8c23c79635c1f197c470c8be1d257efe2f76abdf, 1d08a247896b7e32c5055291dde20b92ff90baac, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>45CE9AB4CEC3B2CE</RequestId><HostId>7IqCz89hf78f9D73evoSVIYe49yI+JjNIXcF6u+fzzQd6o6xmfbkz/bfkdPswIOfUbE2SZSLT/E=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs 2a9d9b7844f4d3c6f68366c128d5a321533d9d2b, 15bdea4ad08bd9c14ea9dcc66f2452cd4c0329bd, 4404eaf5e2f5c891dcad07f6ee2318840d72c4b8, c8317b09d52db730abafb152d51f0a7d075c8cba, cb6e66c45fafb3e89fad577660ee3fa5e2363de0, 575d48f6554b91dd8111c5deaa3a01fa8f8e490f, c2eeadc1fd79d45fd1156ae2a20a4534ce72b840, 9cb1907ca398a3ad3e6a364b4244aab11dff0d14, 3beeb90dbb9784e72cd4b720b9df9b70b686a5b6, 5b665f0bcfd4d0e0dc5e0a8259289e94a886d7bd, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 90 blobs 6f6f58d258605ffa85a37a86de2b57cc440d2632, 6e2bed91f3dc80afa0968f7fbd6d51574c9f152b, 1a3f114ce2608ec434c72ee971fc832060a41377, 6a45574499a860ffe23e5a9f80b11dd802ca659a, ffb3c9e690b90207e1dd9947663f66bb6cda5222, 116e0382566a3e7ab7029c89bfcbe9c74d07433b, 0a704ee63b6b70387609e081d3fd360be87af9f6, 624e03c79467bded22b885e5f1bbb4a62d951a24, 3c17b3c22deea567376d9ecc48b5fb7d8cc0f45d, c8efa1e962970dfce07f4eb371c1b03b1af48ee3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs df3317e4091cf381fd3582205ce917add1c419b8, e396e6c5e8b1297b1305d751472ea88aeb0ab444, a1eb6bce3832e2d55a4c5d7ffbee1d011f1a2b94, b5714bc688e6e19ad14cae21f725f1c2483fbe2f, 3b98a7a2fbc082d893ba889dfa72383216b8f670, 047c6d9b10990efb67f88e02625dde67e1000456, 6305f922ad0216cf317b0c6f01c397a74e853319, 08e4c4f6f6a6f8a7c9832e873cf6a4f0c95f1ff4, 9ed56d31d8b6032fd37910209bf50abb6e2295b5, cf2c6a4676aaab5c792f3c6a619a08716b3b68dd, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs 3b1eaff247cfd4d0afdd203e35ee615a0c3dea02, d8422f912ef707845117b6e7ca4ac0666735ff2c, e473b907b10f70c0271f3495429bf2b6fae5ff20, 5397ebf6199fbc4443a473a21eece692572d9ad2, 880903e9ae327ccb87935c523ea782bdeeda056b, bdaebb99bf1bcb4bc05f1edaae7f9b587ef87254, bc3d710fd0c506b04b0412546a30c56b852042b7, 76082875fca9b9325abac70d9eb260cb868d4b05, 7fc6719cae4afb2a41c60faf0fa612462bbc4850, e5f7249bd1e94ccd16b9c4a784f8e5104c3a500b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs df520d69a33744eefa12852d74608eb6244218e2, f4b06bbe9dd5413d60a5c92b06af59f57ce1975c, 9faee37e1433f5c8696563c9a5efb7413a2231c4, fa12a7a38ce64e8d7b832ce1ece993e0a7414a48, a6db8cd22ec7fe5bc9e5d9097f376ed178c26874, 3bd24ec692daebe785083c5762f6fe4f2f9fe364, 20ca6be526c3cb8070c7709b34ad2acb09eb283f, 39bf49dd6971961b50b1103c73bab61f1144b4fe, 145d78f7c42a0a673e00fc96bbc1b6c7d673d7f5, 21bc606a3fe869ae93eef0bb9711442681cd990f, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 63 blobs e841fc20edf9c4c257149a90c93fb682baea7b04, b78e7afc1d0d97def3893516a3c7de91a0a39ac5, 26e98b1ff723de51fa51a461c3f47eebf797d91b, ad6364dea358a5b26dff22be5e8efe8c35e0c336, 19d7f6c8336ad509e524784155893a676d321161, 98e18db6eefc36d39b753a4259671c20ef165aa1, b9233d5f60438ab616fdba1b95c694be7a337c8b, 0ac3a1d1ed5040afda1541dbb7fb32a5242710fa, e9af78e8afc4dc903bc40a6377a5d23f4eadb257, 3616b1059dbfe03b8923d11a4f6c51831af7a691, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 73 blobs 4bb09f3825fdc761029b95340f77c1e730144f8f, 734e70b563062e1c15b8518cbbbeaba23683accb, db820157960ab7f6332c3498fdc28ff92018fa4a, 2ab567246885af941d0be423dc114f143e23f23f, 634112400ed8cef008ebc8df45b555a0e403c879, 37a772aa1993353cfe638997c234b8cf5a30d9e4, 9a847641ca12ab8a378632213eec775e736641c0, cac47bbbe0a1bea82031e575e11680bc53e6188d, ee8ecb40ce0aa1593621d0f2d7ffd06f6e940004, d8588a2720524b57718bcbb180c8ff1060f03923, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs 0adbde93a1142b6ea59b0bba08ae813e6be1784f, 721bebcca281daf5d15c7e7d3a6988277240eabd, 4000fabdb7cd92067829025d6cf50aefeb1c9185, 6b1665dd36cf3baadd3f947690f536374db7f3ce, ca763118c3383f762294f3035ed71547c0a21fc8, 2e60d8ca0ce2dfa9b14fa179e9ed366d922712c6, d565687450f8351d960bd65881ef97a32e008190, 98727db291892071cfd25ddf9d160d6ba172cf62, e035b69722d419d42759376ff98a1b31d94ec211, b64b138a04fb3211d47045132859433a655aa595, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs ad029ddda3c2d4f5597822ee6c844b854168028e, 10cd72b2c58cc533b503ea022ee0286dbd4e61ee, dba524488630ec7c07957c5a40db16510ad9b748, e24bc54099e1579ecadad24141d3b8fefb9f2446, 1946fe36d3b6f5091b17539265ff6be4565cfe87, 6ce4698da0ecc130aa4f61a1f355a71a67688eca, 5e4be16e12d52a811b701ed02fdba6b594cd822b, 4f53ff07524166870922f79ef9e1c51bedd3669c, 74df4888dcd0f73ae90437cc42574e00079d5fea, c930a1adf4a901da6888db02db9448903d71bd3e, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 90 blobs f7669000ef665d290c9dcc778cb8c2051aaa6412, 10d6e7a6c4450e88e79400e59dcc8e577bc4e4f7, b6c0add9ff805a656b48c6de2f6a837ea0de9981, 405902cf1268f8bf5e9a2a5dd9c3248f8393e10f, 08798d07c8335d38f9ff149900453577912c3e23, ab5b9ff63dc7432b0cc702868a3fbef3fa9b1f75, a732f42ff85694d93b9c6158c4c08b59ee24352e, 4cbba6eec31bd68cba6018e1ed2d5f1a44ef300e, f226a0af0cc48837c6940bc0a27dfc7aff13e2fc, 2d2aee85df3a03b5cbd780da15713f8efdba52a2, ... -> domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
,Check and upload 97 blobs 7dbe07b093f3d7b0d452d68f8be4f551db8107d8, 50be9b5381d89bd24c365b4eba4f3a82b645a70a, 1b4afecd8188015a76e7503375cb06bfc29802ba, 90d9875d408c7ec32902ef0a51b61f6b37f1345d, f96933fe406bc7330b2903947519087a19e73fe8, 3907a58e28e72897d150441e78ed1a9841da90bb, 468ae7e8fe6798a207c6f3972ae1fec82742f575, d53c37fcfbb181107af55af6d45a9c545a168507, 2e7ad43f667ef21ddec18579e79b02d80fcb2d07, e21bdb1a983dd3846821999280ffe2e680d81932, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs 6d80887b7ffa7dd1d6d920c5d4cf7f376f49c003, 7a3f2b2426863803bf0c7f4e8411da7fbcb04cb2, 466d8ab0e93169cf9bc5b75b1d2abd70cbd5fdd2, 0c5449d8b400642243433c836bc677ab5d5830dd, 97df77394cc4100cbae84f256740945c40e4fa5f, b0de72b4d05074708fdd5a8f3176ae65e8baef6f, e07cda3674203601045b07a99b5eef66cf85730a, 83c306f78dfd101022a3346404ce8e8c3bbd7c5a, 3772e59b32172557c61c7aed6924b9b9d309391c, fe77e8dfafb8abe5cd695bc03aa63fe1b7a8c0ad, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs ec58c8c326d2cc57296de1d92875537b38fdc8e8, 660b78c267df186655b7eabf6d63c9b967079a19, e483410ca711996e90f267cd977181ca2331a314, f9ed85dd91dc9cd2e182e5059ba70d79f79467e8, 274168abbcb47d0e9cf8a7250b1e36aa41edf2da, c1bc449a4ba5ed0ed8a231c6a8ee087abdc4c05b, 62b361d8617bef7595fa9ff344ea30de1cd29bcb, dc02dc387be1ec0722baa72780c85b6acf062e82, 7aab61ee0f2caa80d5032100427fb74980f9e712, e994f41e39c4d90b769df254ee62719fc9671a44, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs cecce7b33afe858be852d07e04c354cd99d12e42, 134fa3bc0fee02e78dce6b087ac5194a05eb9ce9, 23c89a299f9b536b514b12dd3fffea280d3f458f, 4a7ad753eb9a52e594829683688a0766eca35279, c3f886d95569e8467b8b28b2fd32b244b6271f27, cff8602b3e5fdeec6b104882411183dc231f31df, 01245c67e603f1c878c1016054ba0edc506fda0b, 4f0c8417d6596fa229c8eb154160793d3b039a0f, 7b1a034540b181767b4b938b0062bd893184a7a9, 7963effb7edd994a2dded256c28eacf2c256f1a4, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 81 blobs 7490b1e2dc491708a881e37a3fc5d60e13fd1144, 68908ace0050c969a38e07649a09417974284bb9, 0c78bef370ba71ebd07d1f391b4158639ad4495c, 1f62efb61b9f0bf37f28da74c99bb36c7475c8f5, 5e09772ac2be35954243891a629c2c6101e4f48f, 7962dd6729f77524083b61ddce3759cbbd1273bc, 8add7da8b51bf42e660d34ee9bb47a3ad036a577, 36d03cea5da5a7cb9eaeec7205cf6e2828f1cb5e, 04bf98c288c2e83cf7b23313e60f765b31b92c84, f9659f15c2c9f9d565a8221fa2ac1b2070765d6e, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs a58d96862d4bd4bf7ccdcc2fbf18667891065900, 479b43ed43bc0ef0c81b94cda65ef3c7837be497, f8dd84ca49f1f4914d6f5103e333680afd8a999d, 61e1ee5aec35b57b247529db65d940fb1db34512, 488a4796432438e0d891e8daa70965a6bde649bc, ac702d51f0664d80ac8765d967bb2377f200524e, 81fffd21f2771afd58383318882d22f3c6f0f7d0, adb71bf7396f1ed676918b8aa17a6ad8a1aeb9c2, adbf4866801eb238ef1c5281dfc88e3e27d9c7d4, 1eac1ca84201b5c88b0c15d2e9e41b472b85e72d, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 80 blobs a265168fa6c2de1787dd5692d4f10e34ab0a0098, 11cb0d3601beff67581f68105a0ad3a1fa9d96e0, 00baa32bfd24cd71a56450ae83059cd4ed5af707, 24f4f3a86a2384064968410c9dc63f4cb18421fc, 57e894d3a7f6ea4852474520136c0bae2838d816, 071c829c30ee162421ba16aa5b77e9ed618f094c, 653609e9c2a52c1420f02933b572099a9924958c, 0fb5ea60697fdaf8a18be0f6492d8fa5d70eb1e7, 8fd677de29b89b6bf8b55c9204676010e6c66ed4, dc61012ce5cd36423bed8755f6f592004226bb72, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 90 blobs f87195ae37c395dbf47010b7ec57f09b9e6d4be0, 6dc6193654b533e00ccdbb345f3c27ad7ed98890, 74f4f9924929bf353a6e16642f64a195fe3b45f2, 43b471d1c7292f307d97d4f0d6ae3ea5e72501ee, 6dc266cd2d3df7f4523d4872ada49eed7e58a6c5, 9794018fea3485ba4a79c0a960b1b530d1701aa7, 7680231e7a8880f229377752673bb3a4bdd0de13, 63922d23151dc0819d946f8c143f1e8a478133bd, 23e26687bf99de54b0f01d8f96c507ace4c3c761, 4274ca77fe23f39103eb1f6e118ac6185b8b60e0, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs 3cf508141776f9f847e340e657da0c0efd157f88, 8e7564d0cffe64cb43e6a1ec50a2e446ea598933, 9c4baf10672a4f8655cf766f3714824c6cad73f2, 34219948c9fd173f7042fe7081a494be45e1a2ff, 581ea06755e29bf5850a6c7b43d3a4c1c830eebb, cc98479ed6272886cc41b0ff9be5ee94c992b225, 2bc996a366b7031b623b2adf210444a6de3feeca, c16fd77555e8014730e95de274697e55d33f21e1, 79744bbd8c85380c77b98fc4290020df53234e07, 9a5ccc32a9901000cea9cca6938035b0567126e1, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 81 blobs 769013368c338a7e20df23be8ec77d813cacc4bc, 42f90b8bd3376a11e86fef2f7d6b0ee1855b6f73, f816c051c36356e6449e6e88be0de36d5d7df60b, a62775072d70e28e19a75dda8daf15f99d5b1d3e, 5ec64e3984132766ca2e3b481288248d62cf5548, e9edcc5ec4f70c2b8aa25af06fd847cf49ef8df3, 9a87cd885b0b7b11b6d898cd350500a493d1bcad, 12f346b99a4e3f2ef883e4d16eb0531ce17e336c, b0155752759e8fc3a85fb57e36bd1989e4c783f0, 66c451c18cbdd029b2fdff93aeba4c77db095829, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Upload 4 blobs 74c075736020b11d454a9c350272d82ca8152f95, 3a03b16cd8e110d2beb872182c6df0b1ec488d5a, ef3dae5b8daee9224b243574e56824363ea24bf9, da39a3ee5e6b4b0d3255bfef95601890afd80709 -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>5B7CDC4DFC44E98D</RequestId><HostId>rqO819kkCs6cFAyf984e8BnVCMEOzBYzotf7oO4a/UTjXPaMiDQtNb8Bza285ocAHHfuxyO+fn8=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 92 blobs 6ca2d0201ff47ab8d884750e4196b0997250ac1a, 4b668803a5cafde85f7ab5f1e30bf56aefa1e81d, c234c19550392c72e035e231b3789f8fad0af7b5, 3c35a61d2b5ec07f0271eee9c78671bf43e5c1d2, 44ffa367c2da5592591fc7dc5496fbc5e3506f89, ef25977326f6f947c6cfad6eb761db1348b3c469, 856aa27651d02e1cfcebc4bba0bbd1679a30a318, bc7498d339f1fb7bb55caa2721909a9ea5d3ee73, 8bfb23aeb2842c8c5f60db9e4338c821a1e807ef, 828c3ca6a42ebdfa87084e4ba23d4be48f64f3c3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 78 blobs 3acc92198b67488317223ed52e80e50f3ade1847, ab606c262221e01fa7bd1fa8e1ab072c5a4dfc8c, 005820da901615bc085657a3e98374a263b3b5d6, a7ad55b837129a630bec96a3f9095b12817fdc37, bcd01732f21a659cbf5c1b6f149e5fa3d547912f, 696fe45effb3721f656773d9485316cf0faa343e, bdc942413aef3182c60408379d5646eb5f5a41dd, 3eb089560cc2248bb2b6761f27e599cbe84e2b71, a1b4bb60d45e0c0d5ebc6096f982fcd5e53244ed, 5b7193ca19fa71b030d7805ea29a57074e4bc564, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 62 blobs dfcbf3c8d5c9dbf38b29afb8d9746314b00b1679, b0bf80638c893aa33a7cd3c3ccc90a695a935d33, c7f4f46aa702488a341118600e59319bf8193b60, ec6c97f3e0719a0a08bc731bf9104831d1030f18, 7f19fed4cceec6b1f21493a655241c7632526272, c4a6a2a19c5f77282c530b3a7c1aa135b66ad0dd, 5793e60d1b07c18cb8ec82baee84adff3e099bab, 60df082e41f91220da187fbf63479eb4ab49bb89, 85b558f114717247906a6b9d1848f64fef3ced3f, 2bf555011f3f118aaa5c07effc4113e7c9a16a4d, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 76 blobs bcc7eef6fbddf5345494f77bff60fc0b428d88d8, c632fc088f2ebeeea0c459c87ae190a08d2b383a, 50b90f606d140e7619eaf7ae6295712a338b70ea, f1a8ba540c8684694b42aee3a40b0fc769c76243, f87f225908640b32e4242029fa1e442bb3ae5797, c2a773089ae20f9d66b3424ba0ffee070490a515, 3ebc0c50aa630e6bdc68b132a160a3f2d35e8d1c, 40eb236e825d87bb0af3f883e8ec69988a40302f, a38a596da1d57e8cef5d14f1e58f7d1ca957c588, eb4bc9cb631d99fb126e2a1608dcaa2238b26257, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs d1741d713cdb039028a3f7584d56469f5a37442a, bf771471ab04fce6b5aa23a5870103a1dfa9b289, 494e9ff8db0c3f6f00f67eca0d5ade442da4de9c, 645216ca53345d931e5a26f40e0b2406edef5c2e, 0ef647a5776b735bfe3078a02423e3273940019d, aaf6db04d8057bf097047295c99ffcf8ec6b4ff4, f87130a4c9d25dbe6ffd1ffb07148a9f1fe61068, 451831d8b193ddd657cb0d85b7470abd46580ac9, 9e684bb6c824a50b4f1d8a27a08031e9a8ff5452, f11d95cdb9b413ba5a612250b1d5a350e8387df5, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 68 blobs d30f103092bc2d78274f507b6907f8ea1b88c429, bee6b9256ca936fd148af3bf25c06e0a6ad24c7d, d58b62e8226b4e6da977899fb0f0c2c35db34db2, edd537412f30bb84359b230e38ca0d5144fa0b38, d3cf19a5a3fe9cab8e8ee0243a0a10b445b3bebf, 43d2882e21ce011c9be5b45d6516b9e92d76035d, 66aa4b87932a636a7369b5aa26f6fe64efb91a85, d37dfa50fcae4c256eeb998f4a493287da98d0cb, 1aa1c4244f0148a73b70b643e03f77a421afb139, 321adc000f5c76bfdd75785992633770f9ab0c7b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs 44226cf7931d4c23968261073bc29c1ac53c61aa, dd5d211ded641e7e7385daa4f600dae8b648b48c, 7f3b8b5fa31efa64267bbfb000fa4ee484f88139, 31bf7ea72fe0b48cafb242c2136aa3674e6ade07, 79e9c0442d82dbcb89fb0cfbafd18bb300b657fd, b8e66265002fc365a72c588992e66a59e2c76646, e45e769798a05ff4beb4811278dd6a5716417b7f, af0d42cf1fc7ce8c19a35ebafa8917f138b9bf50, 5a4c2bfb5c43b3ade0ecdc39b241e626919a0f27, cc48aa2a314ceb93f517f25ae88d12057f49385d, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs 94d10449bdecf28bc3076a3c0b1917e3279fe994, 84c4c159fb7c552d7caca4398ff542cf679c18db, 161d4d8d7210b11366b6adbf02fafe887f0e334d, 4a6d121904c75b2bc409df19f5f2d24740116133, 32d6abb85436935fce2a21e80f46fddb7e090aec, a2ec3271c4b28fdc0de8a7f28b8c6233a917db86, af2cf85e75bec6c5e562436191dcf2b3b168a4ec, 74836bcf22e24cf48ad47e5d8ca7a4fe38bc2df6, eb4574c74a705040f44aaf30f3b27bf20e8ecccb, bcb3cc4c11dc1c0589248f6e66820952a1690433, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 84 blobs ba4af4f7b9a9b1857fe212bb64d3906c00351dfc, f870f2bc7bf1feb0f2725b2cd811180a9a7ad6aa, 8a680b52a2a060798596b88f5dc5e9a83ff263f4, 8a6de0e8a96cb3a013229a544a972e4603437d96, 301eb3294d818eea6f60966ebb9f08d5c5293e40, 44d79ef0d4c78189073468f8601819c360fe50bd, 7c35dec24e432f58a7bfb527b77ff8fe3f7c0372, e4f0efae0a1a00f081c609a15e459d607cea639d, 90244f77ced357932d0f66faba38b1ddb8090946, 258e8f39975c83a80b618b389df55fcb704f9856, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 95 blobs ea43865fd3a515e2659795b6e6448616b449a73f, 540aec41fe93f03a788a0cce4f4c91220cdf22cd, d3b2223c8b224e202b13c1dd00b3f6f4352f5459, 13c0cbed8034014b1f457e206a858c85f0a9c9fe, ea0d56d557c074fb355ce6e7bed6d32658061788, 935e0f112fe0fdbce75938faca592b9548d39d2d, b06880114f4acd91a3d71c226c0fa63e108cc397, e2b9489e4eed81fa38798821b74c512a2c010e4e, 7fd908dcaa6350a4cb18fcf2d55e69c5efa74c64, fd31c66ff87e3e20b8ce7bf69c2ae1ba1c67a1d4, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs c625ffcab41760eed5b2d3215a1488a5cfdbf882, f829c6a0bf4cc01fd573773c1d0c85166c5b52a6, 10ca75efe319aa2aaa3ee9a6d5fab74fa3e1b922, a8b1387b3f7f30332a37fe845eb662bdeb1efabf, 0270ea7da39f080d37cf6613c19a47e3a4c05cda, 838ed5e8af4c078c1e61d635e442271867475721, fe9a9b07f05f10d6542af17f008ae756ba7f291a, 6363720767ece36cea239e5732590f6e1575cf1f, 70b138c3d38863c324d7007ecc61b36178dbc211, 0993c5317e7c9f0e2c8c0ad5787d61a6c278f373, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 89 blobs 8030f661f22c3431325398786233d54e8e68dcd7, e515ed17e2325848e8f1235f748da108d61ab1bc, 0b9a8a0767bf035546814714ffc6751fe11e488b, 38cefa9f25b62ae5ec17b141415750303fe66c00, 53ddbf38b88d9fb06eb64b4a043b84e07e71373c, a1c807976f65f9976eacaf25a3c5997e86f7ef16, 4f7f37fee0a88e5ac468742baa6a47c0c47870d6, a8c4ccb98956a9ec5e4d30ecc75df7412aecff86, 275df2f6a42226971a50a067b90a6e490f8d92df, f8e7878d09d0d3ef0aeff5a3594f6776794e3211, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 92 blobs 9e8dc0cfa90db259ec78b8525d76990c76688650, 5faa64578a9c77b54b3df0602199a0aa1c471ce8, b602f7435bda121bc57ad9adddd43143ac8188f9, 3b00915dfff9567adaf93e7ee168a4a7e11e8ccc, 9fa064c1c4241630e1b595b3b82d46dc11d1e2fa, 6a93bce42494cade9b84d545ef2139417c55ea7f, 50bea431e7d5314910ab80d608b8d0c8145bb04c, d464c796ad942f28dc023265a78ace3471e28ee9, faf0f806795dc236169c2703010836faa46f9302, 7868e3b9a4558e93038400b79816db4fc2912a18, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 73 blobs 71ce107828c55f75bc8e4cbc74e67f855576c2ac, 45ced6659dd4c3df924cd9a74fd335ab700d0011, 701f365dfa508cffe0a33de3a1162a707dd4dfad, b7de84769a32dd862a557f958276952d1c3261b3, bb4378521c35e9f5541d1026fe891993f079a434, 756195c69ad4ea8597f2f85edf8ad91478260be7, 52165be905ac965788bfba2fa30a4ae628c42176, 87de914f46568f1a81280eeefc5a9c1e34c2b45f, 083ff1f13052d9fe9678168dd2646506038a0040, 5f505684098adae4ecaf384b04322dd2ddca75f2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs d18eee065643dcf2ca4c6b12974580a58e69fc94, 47ea8a2041b1a5afcf3ad5dda55680764e78a6e1, 00168b45324d9308e87eb395cc8b3f34eee3817a, 717daf5dc132ac867302d215e49ba569980fcf2a, b981201865aec0664bcd5eeeb6832185d2b7b61e, 1986cc2bdab7e806cbd9db97238cf8ad8399ce8d, 0851d7c3d8c3998aa9b1467f2be8f7b0d6e05402, 769c081396d646808801644671d1ac889ac2a469, 07a4a6bebd1ed5bab741817291457553b2812d15, dd898f1940b9aca7414a9cabda62f952fefaf8b8, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>392720947984FBCA</RequestId><HostId>/u2JEIot/JWooVYcqHP91HBE4LxdwfE+45Ig+lp1hrcw1f24H2ZYbKbc8zrNlxPJnUt8AISGH8M=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 76 blobs a609e7ae19f8aa86b3f5473eda1d813554dae7fc, d2b40b65a785eb6a78f7002cecb365c975af01ff, d51c763875c62ef3bf422c433e1460b0961887b7, 5d875a50f80205bbcea0a5f8e781f42e27d8f922, 3ac9c4e5a77eb67acdfeabddd518585b0bf22b41, e70a5e1ffe55b2d81978e5294d1e652fcbf0c441, 4e8ba640e6d7460a6bd95c2384ab2fc3012b8809, efeec6f2ee532bf01cc81c30feb60c114c04da3a, 73c00b967f31cec912c4648ece13d30d7f2888de, 3667a7aa2a66ab559ee196d923faac4ed49afa01, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs 7a2b57844a0858245500c0c9e7a97d5c5625ac3f, a07012fc26ead6aebba0c4d9220eb63d4007b729, 5f6a314d6aec7ef50efa10582ccf65b2857b9e0b, 6eda546bdd5d3fa49e3ce4dae598bac7748ca262, 135785f2b7ddd27611d29f21cfb896028c9a1295, d79edcdb6856e455a42b990e536ed170db74f2e6, ae9edde351d9ddd616e7d0ca0ae3a3ad666ce6b3, cd5df052018582c4bfb3648d78ced1360eabaac2, 56c1f1d2803f5d3aed4029ee12f59e9197b83107, 3855e3f1996deb9fc71e513782b78ebeef1a0078, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 93 blobs 229bde8757655bc6eb2b1e264dca5701b7b12e9a, 96c135bcdefdaefa0d5d4e8f3ac61473764008a2, 5d1b2d01f4bd441b953f20f81d18752b22bd51b5, 4076f6e3d2562b04c437cdc5d59b6c8c4026d65d, 26ee5de002168d921792d0d1a59f9b619f16f563, 2e75a05d30a7788fd2346dd0db3495ba74814524, df06521802590b5e0260243ce61d2c30e8f2ce3f, fa3b5e31a513f98b433cd26604228fbde4743678, bcde32d244bccfcb39e4198145c452d2a60ab6b1, 0842ca02891564e3905eb18f8a91f5affe3f0fb3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs cfb15a7d095963803bf95a509f1e5910e0a0f5d7, ed9f777587a94c533c3ab20f097fb5ad0c8c3b95, 952daa25eb2920c7ee3b24a2a55686cd99e0bb25, cd401493742e65223a89235b39fcb35f139c98f7, 2f40a8984c9ec8115bb6e9495495896df28eaa20, 87a081829e50ac7a377a567d30df7a3b9ffec1ae, ba01e1b2541efe2f126a5675c2ad33c955a6ee8b, d0774209e35544bfdf46d856fe66e297bae09330, 0f6900fde789460933fd67d7b635168a3ed4bf04, 97bc2b27d36af2c1b2acd9cc91aaac50e0629c78, ... -> domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
,Check and upload 92 blobs c13091a5ddb130fe25832653672845e177fa6cf2, 80bca992eed1bc5983c39fa5b5e12d0004208b59, 19bb3510bfe16fc9bc2f0c6bbf0081ddf83d77ff, 57d7498b5e658eafc1c149cbbed36105f5a8dae9, 8f9eea3003f88954c5a4090e785fba750a5d0389, 97ff501eae53c9421f91529bd680b593d27a7c26, 52fbe96b05fe8ae1f0327b6cbb28217ede5b3d2e, b2526bb1b8312468a8e3338c6d7dd7545672edf5, 37e894625e1d8595ea69001da8c6ca24554ce185, 39b7560b6cbffe6a8b2f5c9bc0573397f8a97d7c, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs 4a1df2a70a20f290d704b8e193fc63dafb69720f, 318d074e411f8f2f1b6fa257252a88dc2c67fc2a, 87d95af488e78bd7157624309cf30a3a8db4a671, e938b309c7f94f4599ded0d6d30f63733a3aaeae, 3185d5b7aa6971fa49d0d14b668ae6b932c5df20, e7258ae614e58dcd25cef584969bce4ea4421bac, 52dfe4032c6d930d0462531f59e61b8a9cbe4f0c, 6bbb293e3074721aec4f457f46b59d0da7f9e237, 4d133372b10810d61356d14f3cbd489324414cf1, 5fcc3a566a11576373ba69fbe0f4039955cbb920, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>094D97B9C5F14509</RequestId><HostId>YFSVw0Dr1wuZp2+S/KeopdvW56q66BH5+fjdFFaFtSLa2HckhUVY6qyitfX1G1QalAxtd63O2e0=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 77 blobs a68cbc909df8ed0e0795e73c1312d89181ea2713, 2d82949b18b4fadff3df44fcaf05b8d76a9e1492, 6b897fa620022abe55557649289273b35151ec3a, 8d46c0d1b56e466f7985dd3114273403a9819494, 57efed9f20c470664e1e2c6a548e48354d0b7baf, d62795cc3e208263ba349873f64164da5dd7edc9, 7bd9ec3fe942589c4c0fe01d3ddbb34ebeeb0caa, c197a934195a694a015393a3a82c4145f4d3dce2, 9a457050635856fdf197d5a11ecb995d4a1830f4, 2da1e377587193287d3cdee71a2333e7e4804647, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs ca49930e2ecbae7e4cb68048e4f498be72abcfa5, a4949f7fa9b5e07e847c0f836cf9b976064b6b2c, bd5d1c4e2befebea0d84d65cccba03e42bb8a0fc, cb5e63552fe0a5e39fb50e4d0f7f56fdddfb4ba3, 46e782bd19bd5b7b1afd6413255a330931b620de, 4492bd40ba52bbbc6a13af1a8dcdbbdba11722ac, 0834be3c0f345f303723efa1aa03e73487851b47, d092f5cf2a0667fc3abe7fd5434a13bfca3444f6, 4bb7882fa42cadadf291a8b994a4384ca3149bd1, b49ebce883842ae02c4d958f31f1b607f6db9d46, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs cf36d54f75c35c90babbb627b03092401db6a809, 3390d29b99ccfbd332269f6a97252f91bb9f7a09, 738c248d83cb03e6597ba5c07d38220c1ae09957, 383a502ee52dfde1ef20b57557df8d9293b991e6, 5f7131319efdf969541b62f56f0ae438a98d2951, 93cba21db9b6f749fa19fac39ef4454f396c9946, 242c77ff30a6c55bf18606637ad8f826c1081f2f, 9afb16839671b50f677dc5660b486f6917dfbdf6, 7b16a7a393c0993324613c416c8b71f360c44d54, 72400f016a926da080ebfd0e7620d2aafbb165b2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 96 blobs 89500d9bf6cf5d67b6e51ae4c33435930e2b0860, 20dd77b43bedb245bd9193ceb731e448d9eb1be1, f13d658f2e4612b388e6a68238050bee486f9d0f, 11cb7bc12b8a48fc3fdb3be6327e0d37c9f8bb58, 39227daaa87ae9ce4856e0cd3968dc004cda2ee2, 3bea352e0eea262c23693593bbc31521789c6b18, 70fb5ecc18df33d452eb524b0b646bd17dbcbf01, bb61df58401e337ef21dcf4ef07a151c6162f4a4, 218e5680d1eddd95c9443fc2cbc515e6eaca90bf, b177ff50a54e0c290211cbda27b7152ff9ee1fdf, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 20 blobs 0c25863ca285e462ba59ef4a5c03cb42a7e4c758, 4eca8da5543bb3d7173c387f491128b59a2edff4, 032ce1b6fc482070c933b4f69238466e4bff8268, d39eab940ea51295e70324a3372e1da41848daf3, 7a5fff608f98588170fd9bd80ffa4bba13687e4c, dfb1714d7ccc51ae2adaf8c36ef875b693e3700b, e5f43d5772fde6d757ad8c486340fa3001d3df40, 261273b7fba3303a88a7a76d5b003e925cc0c824, b001c7dc0f4f499b5cb486cbc0fda6cc1da4a93b, 98ecfeb2014c225064b3db2b2d86cc80a2e13426, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 86 blobs ece021a40635f9d100125349c724504c14d05b5e, 1a6b2e1ed10294f82c7af61293c54163ddc6bf4d, 7c3d3b59b180bdab2ae3f0769a460213b243d9b1, 530a3168bb05c19e0582b962c68ddb1a0406b6f0, 1b131952b298820d981c03be5a275f459404b9fa, f079edcefbd2ad908fac562641d542e28df2b8a2, c48008a9d3e1dac73011948d568225df9fb8ebab, b87ba41b9dff14a7f8eb676193cba729a37655e8, 9b93c5b953c0fadd59e617df1e65ba1f4b79286b, 33a7394cacf697451c7b20638d811fdc23aa6da2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 77 blobs 67b4f9b89ef747220e618fb951f82f54a4eafa47, 716654ec950ce7ccef3f6439e53ec2af16dd421a, 763d4fe39ae9aea4283d1b75927cd5ffb7c1e2ca, 1c8c8d01a597124bb727fc420b8c8ad6730fab44, e046862f82f975061d0042c6e5f04d05eeb6f59c, 9e9014b6c25bbcb2d0d581dab69640ded9c7a79b, abab585635ef5d83487b3a743cc2c3e9ec8157df, d1ced5871020f9996f337a8972c421bc689f8096, 460394106db71f9169a0f9c9d0758f0c8b4402f6, 0dddd146af639a41abecd3c3221822682d5bbf45, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs d577551c483a2f32fd0ef1c45e5765d0168fcd5e, b7f482282c16a2a4e0efc3e767f47b5529c3c95e, 9bd75112bec352a9d910c7fffe4a1149b8b59e4a, c11dabd226694f81fe973d4fa64725eaa5c6ea17, 003655747ba04f0781ead5c7cdda0cc80cb88e64, 068970eab01f73a2469c1d197fa1e6b909d4f24f, 3cb65986b557a0757708aeb4dc26438762a3784e, 2fd3b3e6db29658bb1c306ea74a9c389e9198f13, 77802cc089a7b6fbebeb976236113966075275ac, bad7ea303eb7d42f62aa6dc3f3c8cb52e432b613, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 87 blobs 56db5dfe65c0c4ec6ce64afa58257f1535f66832, 62e4bd339b6794565659fbe3e5936b442c5e803b, 0aa23ab82a8f1f1c177b74ac46a74d67d82bd92a, 7aed9b990334c79f50bb938ab51ad78a7d3e60b0, c962b7c87a447cf2cda0440c0a1c6d82dc825292, c888b8c0969c7a822689c27d264e1c452dbc497b, 39686d8623d9a03d4085a66d377c8b743f507a70, 7f7121129ea377d2f2133961b504e162cfb3a62f, c82a7b5ed84ba2a20a74a3a2b8b0dc201e516db0, f9f7a293cbc0abc3c1dfc68e02d3851c22af1a6a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 95 blobs 18e7085dc663d6f0c91df02e3a87dea8c5657ea2, d4bb0c38445c629e552b6cb72c8c31729f202d23, 07ad9e321d74c93f8ed5a4589f4ea6044acfebaa, 16cf961439334111a5fb20a88b3442a3e54db3cc, 7de41d7cb9536262464667b929758448e3557f8e, d75e934f09a19ddfb57389b57ebe3be17fd648c2, f4028766f324882e8cb34cb642cd2f8235534ea1, 6ab7db6f0959881f4d14c895d59fbcd2afd017c9, e4f8e56494093a75bfd274e84cf71c8b91310d0d, cf286cbc48a64ad2e0eed5ec828eba9a8af16a1f, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 78 blobs 885b2ed08243be1032348dd749bc1d8b6287def6, 5c28ae0e079f9445917a9aaaf85ee8a83db4d522, 8e007283d3ce8d29671e4b3eced40230e3999aba, 4f0ff08ebd6634c02ea55b8fdc123a9500bac703, caffa83a15f7480260abe916b2dae26e31166a69, c3a9fa3c920b94650ac2a3177b8d9aa55d4db3bd, 4e09b653844aecb3fa22ed1f0358d384c51eddd2, 3ecf4364de27a291f068a8bc0776d02a244d1b77, 3113b2355da1a8e339c49da8fed9dc274ddc98c0, fe15f3e76fb5c78cb6445d2499e4f1a271c4da1a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 71 blobs 0dca6c11eb151cfc903b99054dd8d8aead0e3ed0, dca9f0544e2d910b80cb1cba10ebd1c3770fd025, 10d822bcb0a37da5a3163987eac9bcdacf16a07f, 14910e159c6472a3822eb11d6382d68ae7f4ea21, 820ead80380212a714bcc6071314a30c64bbe534, 30481ded51509691d8bef6281e3e27e2bc82dde5, b8541c4126583afb0986adb821b9ee972bd1e862, 61662d649b4894712ece002cc0b3117f71683349, 370c17a82e9cc44c15e772fed0f490500fea284b, 09b0bd4fa6d7bb3f42cf3011e60e2aa307269337, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs c769cf005914e1a615838f776d2bbf160e73e698, 4c44b0119035a28c624c56a9b70cddd0549c38b0, da5f774ac89adfe97d2381f3f037cf373c7d610a, a91275065712b1f301f8c1e362baa90c0dccfdff, 34d95b86c1a1bfe9ef6e85cca2b2cb9a7a1614d7, c3f7891c6a2a06c4220872e8d415eb0b3125cbd8, a1c099e60cbf6e3df0840206464d6e85b22207a3, 5a04cdfb8ece831b652b1bd8da0aa73c0908ccc2, b85e752aab4f859a80c0946d9dc0110bd22d31b4, 46810de56e48051d85fdc85dd75b08ce07c1b624, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs a78cd0cdb2fdad2d33698149f27a0be18b9c2ecf, 2d5f0d953fa0287a2913b11c5fec18ec9e830633, 8e63b9d17acebf881a8e3bb3b8012f4ffc481f7a, 9b534405e648ae238cb3d19dbacd6e59e4d5d21c, a9a89f96e3dbfe8e62e5529a9be0c1fa0c8dd9c2, ae951a970c1d935ebae13320f01ca23e7764b9ad, fb6bd0edf9efdb74e066e707023d56a1f7596e53, c69927dac4372c2a2895567e4ebc48eba69979c0, 15988f92e7c07d4c232ec8167bccfa332a2a2dd2, 6ce95889b632cd00a30cef6de65d94e7d4805bb2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 77 blobs a54d4a9e59d40d902001362c9b43594d21de1673, d6685c283b058a1f3e4dc5eb9a75ddd754d285da, ccb04895f38108198836e26746604b661e1567eb, c991c6220afe902fdd584a4fb278434cde149dc8, e7b2c1f951ed4e6a786ee76a4dc67db64119a63e, afc6705daf11118f989f7f3c63945237dcbbd1d5, 5de875a5761c1ea782c2f93fcfdc7ee4bf0ee1ac, 8cef0f3728cac01870af88639840e05b83b6c972, 51c3bb5a595d6263662bbe52b7cdfeba54fe4193, b68913e2285da19e6ca0c0b544a32d70207407ba, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>8842A2C8629A1BED</RequestId><HostId>GJeg8VhcE+xPl3PHpo2iE0MgTdr0igCDnQ0e8eftX09cmrKEfKGgql1AvdNqP+Cam+fQXSGm8Dk=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs c300241b4bb9fc71a3baecb5987e5433e0497ad4, 0d0facb13fba66e5cf7679e39c9a136086117339, 12f9d14247e78df5a2afea27d5e86e2529a63f33, c93084a63b01c7d268e9a0aa1af4a1e44923c5ef, 8c09b094e7d39615cad884af56066d8591e0f5e9, eaabce4b3ba429fceab0bef2cdc8ed1079deb300, 0d8ca02b20276cc00b6ac76666652de45c6a9273, 31e53790084501bb99d9e08099d68033be7a7474, e5e5d19abcb24bcd25fd22d6433921f5664345b2, ef15e440bd7b3cc1776efcd9dc604917c50f1fd0, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs b6dd9ca02d9ad31f7902a8fb8df09a20158e4b9e, b6a69906a9029fdc457169e6dd65b3b120893570, da47b791879dba8752bb2af85dc700995f81c6cf, 76eaa3b2714a1bab4361c4e649ce7d4d01dd2a76, 7a3dfbffacf340724f701b62434825aed4399c56, 17580f296b2e86241b8e9ec83b88ea224279fe52, 1cbcccd63e7dc49f7fe94f80f5fb40c20b6caa67, 25e889f7a72fbed72b9e2ae6eaefd80ee2c0203b, 97390348673e517e2915ca897a45c838dd065f1e, 3f28aa7f95f17f192f76cb7cd108df40e6c9bb8a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 88 blobs 988d42ce422ce6b19fe7bc734f2d72a692da75c4, d01b69b11101c93bf18960113f5f2203ffe70e63, 1bb2c326031041554d2c8ef4acea6ba9d52b0901, 010e3ec65fea8935f680ab0b4883e97ef2520966, eeaaa6a3297ba07fb81f7c02c2b700af1aaaba53, e2319729e4230cfd534916d5de3bd1ed2d0a3cff, 3c91edbf7241cc8385199372deed1959f9e084fe, d8453e9f3a2e1c3783b9db9739d1f93520c9dea1, 4702ccb3414b8390a8df4468b9c507c1da9701b0, 497df2a4c009a1c70b979381d775451c1882f3b6, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs 0583d5aaa1c3410331bfb984c2559ac20156a193, 46e4d14ec576c525f143490abd99d07eb644010b, 65510d2daba6c3bc073fc6cbb16ff3bc50ceb874, ddc179b734222f52898d9e8010e5c62c83bda3c8, 17f1553e02f01310c7000961af56c7ac8b3b089c, f7f2497b74fd176c3225ace7d1bb0e64e4bed9e5, f6427363fb82a50952b49a49729c436d0f222614, 084c1c8ccdf01bd3a08849e9b846369bf79d818d, a26e3314fb7b6ad409e7d59f867b8137579abba1, a1dc40fc772ebca2e3e00017f664ebc9e1dd7129, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs edb59c4c735adc2cac1161b4bf90b3db72c8574e, df857ddbd76f11abec6fbdda72053596fdd0d37a, bfb1765aca244a46dceb74360ac0b95575dbe2b0, eeafd22b3a4fe7215a32e25e181be2207c576a56, a789278d03e00ff615614a50d3aff3813b538149, 30ad6f3fb167ed8f0c9fa84a7553ef6789da7d28, 098c5f91d64ca0ec33f4bf950400d34d11edfe32, d3dc81066c33de1918099ce438e655d10d3eb389, 696d79df776b7ec40937c64d367c6d4e3b65c0b2, 0cb24a1d9287b424ef0dd9260d89fa3ee215464b, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:53 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 82 blobs 46dcf91b511a75b33720cd5f6fb06f00a15d13ed, cc1f56cad7cc2e4e7191ac5be41cbce037578426, bc885201c6fd8f6c18fb345d43077e01df002b46, d060353532f317a6e3099f86ab0c93e51a2db1a0, a4e4bbff5588a5405a313fd2bf13d4cd4585ee63, 6a44b82cd0798ddfae64e2c90b81f864dd31a0c3, 68851ac6b3b2818ddf27a1ae409d762bcb5b407a, ccd7e04df862fc7d0f80b968a6f1d9141ab1bd1e, 507c6f7b26d01e4adcf352e653aa762d7a40fa70, 99d4898de56d08881fa093d31b60fe74e2f8f8d8, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 71 blobs 257eb4dc2e71a571c3df807c481d40876e96291e, 55adc379e822d57cd0a50ff44f7be43199963e65, 4987e99b39be85ff2a9b766b209cb6d6448e8d12, 165d05f911a3adbd1bc151258168c1693a51efa1, 65b3c839fe38978edf76227812373269e698b169, 27f765516b092c48e4df2a7994fd36d09c9569af, afc787731402ef5d9ea2c8824da8d45a62d9dd63, 9a1621c5ed09b013c718ece4f44f55e4e73097a3, fe6cfb83dc2a7b48355f5906ccc3ac2bd2ed4178, 3fd884d294654f3a761a77d35df68a821299b6f3, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 81 blobs 1fba17b30ecf982804a54a0f9256586cb4e951dc, 7d69ffe4361ab4ee232a90557691f4abe47d03b2, 9622aba4065921b2973641540ed98184a1e3c693, eaf5ae1609173d6d86ea739fa4dd5a0f0468c430, fafc7a14033472629c58402b7762a501ae53b9d9, 80ab670c82daa65ba4be519106f72fa76719c732, 3ded41a5dcd6227027694a81e73c5e93407498ad, 64583012df2a884cb0677b4ed3de18a881dda974, eb5b88e70b9feb99f4a187483f39a8f613610ae6, 90d01335da64df85a87e121719d594c4f16623eb, ... -> domino.common.UserErrorException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.client.proxy.BaseTransport.renderException(BaseTransport.scala:137)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:118)
	at domino.client.proxy.BaseTransport.postAsString(BaseTransport.scala:18)
	at domino.client.proxy.BaseTransport.postAsString$(BaseTransport.scala:17)
	at domino.client.oauth.OAuthBasedTransport.postAsString(OAuthBasedTransport.scala:8)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.getGeneratedUrl(S3SignedUrlControllerProxy.scala:18)
	at domino.client.proxy.api.S3SignedUrlControllerProxy.generatePutUrl(S3SignedUrlControllerProxy.scala:13)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:30)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:50 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.post(HttpRequest.scala:46)
	at domino.common.util.http.HttpRequest.post$(HttpRequest.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.post(ApacheHttpClientRequest.scala:36)
	at domino.client.proxy.BaseTransport.$anonfun$postAsString$1(BaseTransport.scala:19)
	at domino.client.proxy.BaseTransport.handleHttpException(BaseTransport.scala:114)
	... 40 more
,Check and upload 82 blobs e69b255abcd92e3c4c9d8a1bfdc670bf8ff8a288, d2c675e6d371cf940ca0593af2afddea19a828d1, fb54d8e35a768df40d846c5ca10c88377a3e15a9, b91a4e40f2252f16603e24d653b57e0b14c1e657, b0693efa41fa2d24e97fee0963326cb352d75b03, c13790a03910e05656d7ffff269d559acc16f4a2, 3963ae96c2c1c718eb11e14ac6e9d354fb37ed31, 7958bccb58f338758d4839332847b2b38aca42f3, cc21d5970431a500bdbf67165214d93dd769204f, 04153589e69de6ae659496aea6d5303e4bd2f364, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(10), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 94 blobs 91ecadaf02525648cf8e805c9a39bb76c440a4d1, b8cf7e526d51683711c29fa5487d9f83a10d6e78, a4c8f67ca096b9573b810a63bdbc9d44c7352b88, b492914b00aa0ce692ba5279522a514edfb3813a, ef02b16091952594a9c7f54996761ce341f88e1c, f06c9c712cc2ef794dbf5050af24adf077c55bc5, bdd2de1be5032af833bf019b015ad5afdbd539a6, acf5a636d3d495d4dae04f632d3439bbc8767274, 6e16c9b6a5d0128f1457dc527b3aebcd3e91291e, c23d75ebecc1a371e263c33a65d7f7048f35d53e, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(9), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 85 blobs a4dfd6f57c5730d1783d42aed13289ffbc12946e, 595346f915efe9d24087feb5d63e1439f8dd5172, e81769c585c871e1589bed0e9af5f9df6ecab8db, 048f64d3edf37086afed7a60ce50f016e986d99c, ca6af76d6bd316a590c5ceb289f643e53f1d7003, 89cf1718b3f7961707eb7f96d3535059f1a26373, 21731e5a463a19bf955b0da945f1147b7cecdbe5, e97e8b658fc7f00256e6fb26340cf4ac86e3d953, d883dafb396743bd5eb6c143c347e4c3fe29f0c6, 742c96fb26498845aed17cf0cdcaa698d596b2c2, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(8), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 75 blobs 6d802c9e77d84c1ff02ccc7085b80ebda046e53f, 26199374c154e0caf29341dc48549b370f87ca45, 0ca6976fe19e593dc4390b48eccff94dc64c4273, b3aa8d28161530cee8b1cb67979e8959c4ce032e, 5b97a82f149c10ea58922aa3a0bdce8bacd504cd, 66ab39a46e71bea494a5c827fa1c8a071cd1349a, 54a3e840dd621db066126cc13c2ffb50aeefb706, f9b48cabe511940bd164ec188cfef0b6653704f6, b4a73e599ce7b6a580c7beac84dd7b457aae2bdc, ac9e3d4e6a58082444a6567ec14b492ba1741da9, ... -> org.jets3t.service.ServiceException: Service Error Message. -- ResponseCode: 403, ResponseStatus: Forbidden, XML Error Message: <?xml version="1.0" encoding="UTF-8"?><Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>562ED8187C7B4184</RequestId><HostId>D2p/yx19wszl3por4Z93oY26rVKjxHzV5z+QHASb4r/C8OV30s42SwUpvbakr9mqTxIg8E/KURI=</HostId></Error>
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:409)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.performRequest(RestStorageService.java:279)
	at org.jets3t.service.impl.rest.httpclient.RestStorageService.putObjectWithSignedUrl(RestStorageService.java:2341)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1(AnonymousS3SingleProjectBlobStore.scala:37)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.$anonfun$put$1$adapted(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.BlobToS3Converter.withS3Object(BlobToS3Converter.scala:38)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.put(AnonymousS3SingleProjectBlobStore.scala:28)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1(SingleProjectBlobStore.scala:21)
	at domino.common.sync.SingleProjectBlobStore.$anonfun$putMany$1$adapted(SingleProjectBlobStore.scala:20)
	at scala.collection.Iterator.foreach(Iterator.scala:941)
	at scala.collection.Iterator.foreach$(Iterator.scala:941)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at domino.common.sync.SingleProjectBlobStore.putMany(SingleProjectBlobStore.scala:20)
	at domino.common.sync.SingleProjectBlobStore.putMany$(SingleProjectBlobStore.scala:19)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.putMany(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:211)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 92 blobs ab1844eaa1f7035c4bb10f980bd88193c080861f, 65aa5d8475c0e8f0cf111ff659118e1e6d9c81be, 158f456c84c3bdbfbadc1b1a2e5239b2de451636, aae076f8c97c5e418bf8556251440a42fd63f3ee, 1df61f2f7df031557769016d5f62fd6345834202, 8589b9c97271e05da0f29134b07f6062159f24b5, d3b6b972cfb95577294bd703245e73a233e1e64a, fcb1a6a6aaf09676ba50bb2bbb5eaf29dabc2ba7, 3dfa72d87d70d9d011e726433bc2525d2b51e7c8, 53de0255d63d6de8ad6db9eef403dd2244b8ca56, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(6), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 79 blobs f7f4859bdb5374b5cc91f17a25796b57861313ca, aab9aa34757dac3071035d3f1d4abdf84118180a, f4c137d4c64a093fa86fa4b2d67456a918034a38, 8bcab8eaeca3c33fead7528610ea92f9f91a2ca8, 1747e15c6688cca154da4a613b2e1ff7bcb63d64, 7199cb3b18ca4f7e0281210ccff82b629bd22d7b, 58b80db1d575303bd11e3d9b165146445db3a7d0, 2c65ee84b089b8f6dfba8a984d4293c80a768d19, f8935e6593330b7556a58ddd00cfa2d6fbdae1ed, 31ae407c40ea7b1cffbba418a207e5eb67eca27f, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 86 blobs 8082fa466d663d347bc5d2ec4a98cc0746b3160d, 834ef6ee99b33727a6d24f076b66ab603590fcfc, 65fcff2487028c2aec410830886683404f003512, db016174ff3fc649b1bdae3e7e8ad7968b484640, ad78bf8cb56bf7a6ea97e5d3b927f741bcb15e0c, 1fada60211d3c1a458a368cabc3f2908acd43450, 1d033ca46597faa2bd725275121ab50ec8e70c03, d73af4aaa4c034e94e74cb76eff1502c7548db14, 7bb752890f82004ad6bfc3d24ba26be7b8f2c4a8, 1c4a3954d4ee8f344446d258c52b8d662a482125, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:51 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
,Check and upload 91 blobs 8e66997402290ecd99a69d34e6679d14bf736727, 5b3c69d2c980f0882109f69d5fde0bb959ede304, 3cecb8ec02fdb771b8e1a28316d853d0d5e3a5d6, 30d4b5a69c9bc4e1da3b4e6561c07f4d8a67a564, 9862809f177304635bf014c36e74cb0ee607e27e, 18dd451a5249c9b38903276cd05277ff7ee9129a, adcbc14072ef03799783eaff1bc9cd1c763382b5, 3092ce711c35e1e981c0d6dd2a097329cb051b7b, cf47529c09bb776c650618242f7326c20434e53c, a07e61b460475246c87726204767058b6e8b000a, ... -> domino.common.util.http.HttpException: Code: 401, Error: Unauthorized, headers: Map(X-Frame-Options -> List(SAMEORIGIN), Play-Processing-Time -> List(7), Connection -> List(keep-alive), Content-Length -> List(0), WWW-Authenticate -> List(Basic realm="Secured"), Cache-Control -> List(no-cache, no-store, must-revalidate, max-age=0), Date -> List(Sat, 21 Mar 2020 14:50:52 GMT), Set-Cookie -> List(dominoSession=7d78dda0-343e-4174-ae1e-e628d6bbd856; Path=/; HTTPOnly)), Body: 
	at domino.common.util.http.HttpException$.apply(HttpException.scala:46)
	at domino.common.util.http.client.ApacheHttpClientRequest.execute(ApacheHttpClientRequest.scala:150)
	at domino.common.util.http.HttpRequest.get(HttpRequest.scala:45)
	at domino.common.util.http.HttpRequest.get$(HttpRequest.scala:45)
	at domino.common.util.http.client.ApacheHttpClientRequest.get(ApacheHttpClientRequest.scala:36)
	at domino.common.sync.BlobControllerProxy.hasKey(BlobControllerProxy.scala:90)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKey(AnonymousS3SingleProjectBlobStore.scala:60)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.$anonfun$hasKeys$1$adapted(SingleProjectBlobStore.scala:40)
	at scala.collection.immutable.HashSet$HashSet1.filter0(HashSet.scala:318)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet$HashTrieSet.filter0(HashSet.scala:934)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:169)
	at scala.collection.immutable.HashSet.filter(HashSet.scala:35)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys(SingleProjectBlobStore.scala:40)
	at domino.common.sync.SingleProjectBlobStoreReader.hasKeys$(SingleProjectBlobStore.scala:40)
	at domino.client.sync.AnonymousS3SingleProjectBlobStore.hasKeys(AnonymousS3SingleProjectBlobStore.scala:16)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchCheckAndUploadTransferAction.pickBlobIdsToUpload(MultiThreadedBlobStoreSynchronizer.scala:231)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer$BatchUploadTransferActionBase.perform(MultiThreadedBlobStoreSynchronizer.scala:207)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$retryTransfer$1(MultiThreadedBlobStoreSynchronizer.scala:113)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.wrapS3Exceptions(MultiThreadedBlobStoreSynchronizer.scala:78)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:112)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.retryTransfer(MultiThreadedBlobStoreSynchronizer.scala:122)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferAction$1(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.util.Benchmark$.time(Benchmark.scala:6)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.performTransferAction(MultiThreadedBlobStoreSynchronizer.scala:170)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.$anonfun$performTransferActions$2(MultiThreadedBlobStoreSynchronizer.scala:154)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:658)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.transferBlobs(MultiThreadedBlobStoreSynchronizer.scala:143)
	at domino.common.sync.MultiThreadedBlobStoreSynchronizer.uploadBlobs(MultiThreadedBlobStoreSynchronizer.scala:72)
	at domino.common.sync.BlobUploader.uploadBlobs(BlobUploader.scala:26)
	at domino.common.sync.BlobUploader.uploadBlobsReferencedInChanges(BlobUploader.scala:20)
	at domino.common.sync.FileSyncClient.$anonfun$uploadLockedFiles$7(FileSyncClient.scala:77)
	at domino.common.sync.FileSyncClient.$anonfun$uploadLockedFiles$7$adapted(FileSyncClient.scala:77)
	at domino.common.sync.FileStructureRepoSynchronizer.push(FileStructureRepoSynchronizer.scala:116)
	at domino.common.sync.FileSyncClient.uploadLockedFiles(FileSyncClient.scala:77)
	at domino.common.sync.FileSyncClient.$anonfun$uploadLocalToServer$2(FileSyncClient.scala:45)
	at domino.common.sync.LocalFileDirectory.getLockedFileStructure(LocalFileDirectory.scala:38)
	at domino.common.sync.LocalFileDirectory.withTrackedFilesLocked(LocalFileDirectory.scala:55)
	at domino.common.sync.FileSyncClient.uploadLocalToServer(FileSyncClient.scala:44)
	at domino.client.command.UploadCommand.$anonfun$tryUpload$1(UploadCommand.scala:33)
	at domino.client.util.JetSetHelpers$.handleConnectivityDisruptions(JetSetHelpers.scala:14)
	at domino.client.command.UploadCommand.tryUpload(UploadCommand.scala:33)
	at domino.client.command.SyncCommand.doSync(SyncCommand.scala:22)
	at domino.client.command.SyncCommand.sync(SyncCommand.scala:13)
	at domino.client.Domino.executeCommand(Domino.scala:206)
	at domino.client.Domino$.main(Domino.scala:41)
	at domino.client.Domino.main(Domino.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.exe4j.runtime.LauncherEngine.launch(Unknown Source)
	at com.install4j.runtime.launcher.Launcher.main(Unknown Source)
